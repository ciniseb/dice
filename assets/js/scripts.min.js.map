{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/scripts/app.js","node_modules/dice-typescript/dist/ast/expression-node.class.js","node_modules/dice-typescript/dist/ast/factory.class.js","node_modules/dice-typescript/dist/ast/index.js","node_modules/dice-typescript/dist/ast/node-attributes.class.js","node_modules/dice-typescript/dist/ast/node-type.enum.js","node_modules/dice-typescript/dist/dice.class.js","node_modules/dice-typescript/dist/generator/dice-generator.class.js","node_modules/dice-typescript/dist/generator/index.js","node_modules/dice-typescript/dist/index.js","node_modules/dice-typescript/dist/interpreter/default-function-definitions.js","node_modules/dice-typescript/dist/interpreter/dice-interpreter.class.js","node_modules/dice-typescript/dist/interpreter/dice-result.class.js","node_modules/dice-typescript/dist/interpreter/error-message.class.js","node_modules/dice-typescript/dist/interpreter/function-definition-list.class.js","node_modules/dice-typescript/dist/interpreter/result.class.js","node_modules/dice-typescript/dist/lexer/dice-lexer.class.js","node_modules/dice-typescript/dist/lexer/index.js","node_modules/dice-typescript/dist/lexer/non-global-definition-error.class.js","node_modules/dice-typescript/dist/lexer/string-character-stream.class.js","node_modules/dice-typescript/dist/lexer/token-type.enum.js","node_modules/dice-typescript/dist/lexer/token.class.js","node_modules/dice-typescript/dist/parser/basic-parser.class.js","node_modules/dice-typescript/dist/parser/dice-parser.class.js","node_modules/dice-typescript/dist/parser/error-message.class.js","node_modules/dice-typescript/dist/parser/parse-result.class.js","node_modules/dice-typescript/dist/random/default-random-provider.class.js","node_modules/dice-typescript/dist/random/index.js","node_modules/random-js/lib/random.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Dice","angular","controller","$scope","roll","lastName","cards","rollDice","result","DiceRoll","console","log","expression","isValid","push","total","rendered","toDetails","diceBtn","rollKeyPress","keyCode","Object","defineProperty","value","factory_class_1","node_attributes_class_1","ExpressionNode","type","parent","this","prototype","copy","_this","Factory","create","attributes","keys","forEach","attr","setAttribute","children","child","addChild","node","insertChild","index","splice","clearChildren","undefined","removeChild","indexOf","getParent","getChild","getChildCount","forEachChild","fn","slice","getAttribute","key","NodeAttributes","toJSON","filter","k","obj","expression_node_class_1","__export","m","hasOwnProperty","NodeType","generator_1","dice_interpreter_class_1","dice_lexer_class_1","dice_parser_class_1","functions","randomProvider","generator","input","lexer","createLexer","parser","createParser","interpreter","createInterpreter","parseResult","createGenerator","parse","interpret","root","DiceLexer","DiceParser","DiceInterpreter","DiceGenerator","Ast","generate","Number","generateNumber","Add","generateAdd","Subtract","generateSubtract","Multiply","generateMultiply","Divide","generateDivide","Modulo","generateModulo","Exponent","generateExponent","Negate","generateNegate","generateDice","DiceSides","generateDiceSides","generateDiceRoll","Function","generateFunction","Group","generateGroup","Repeat","generateRepeat","Equal","generateEqual","Greater","generateGreater","GreaterOrEqual","generateGreaterOrEqual","Less","generateLess","LessOrEqual","generateLessOrEqual","Explode","generateExplode","Keep","generateKeep","Drop","generateDrop","Critical","generateCritical","Reroll","generateReroll","Sort","generateSort","toString","expectChildCount","generateCommaList","generateWithParens","val","generateEqualityExpression","exp","keep","drop","critical","reroll","sort","operator","buffer","x","count","findCount","function_definition_list_class_1","DefaultFunctionDefinitions","FunctionDefinitionList","functionNode","errors","Math","floor","evaluate","ceil","abs","round","sqrt","random_1","default_function_definitions_1","dice_result_class_1","error_message_class_1","random","assign","DefaultRandomProvider","successes","countSuccesses","fails","countFailures","renderedExpression","DiceResult","ErrorMessage","evaluateDiceRoll","evaluateNumber","evaluateDiceSides","evaluateAdd","evaluateSubtract","evaluateMultiply","evaluateDivide","evaluateModulo","evaluateNegate","evaluateExponent","evaluateDice","evaluateFunction","evaluateGroup","evaluateRepeat","evaluateExplode","evaluateKeep","evaluateDrop","evaluateCritical","evaluateReroll","evaluateSort","evaluateEqual","evaluateGreater","evaluateGreaterOrEqual","evaluateLess","evaluateLessOrEqual","pow","num","sides","diceRoll","createDiceRoll","fName","lhs","times","condition","dice","findDiceOrGroupNode","penetrate","newRolls","die","dieValue","evaluateComparison","newRoll","countTotal","rolls","getSortedDiceRolls","once","createDiceRollValue","evaluateSuccess","l","countSuccessOrFailure","err","compare","rhv","diceOrGroup","res","direction","sortOrder","output","b","minValue","maxValue","numberBetween","extendStatics","__extends","setPrototypeOf","__proto__","Array","d","__","constructor","_super","failures","Result","message","stack","reducedExpression","string_character_stream_class_1","token_class_1","token_type_enum_1","numCharRegex","idCharRegex","isCharacterStream","stream","StringCharacterStream","getCurrentCharacter","peekNextToken","nextToken","constructNextToken","getNextToken","currentToken","parseIdentifier","test","peekNextCharacter","getNextCharacter","createToken","TokenType","Identifier","parseNumber","hasDot","nextChar","parseEllipsis","Ellipsis","curChar","BraceOpen","BraceClose","Comma","ParenthesisOpen","ParenthesisClose","Equals","Plus","Slash","Minus","Percent","Exclamation","DoubleAsterisk","Asterisk","Terminator","position","getCurrentPosition","Token","NonGlobalDefinitionError","min","lexer_1","BasicParser","isLexer","expectAndConsume","expected","actual","expect","errorToken","errorMessage","token","basic_parser_class_1","parse_result_class_1","BooleanOperatorMap","AddOperatorMap","MultiOperatorMap","ParseResult","parseExpression","parseSimpleExpression","tokenType","newRoot","parseTerm","negateNode","parseFactor","parseFunction","parseBracketedExpression","parseDiceRoll","parseGroup","number","parseSimpleFactor","functionName","numberToken","parseRepeat","parseGroupModifiers","parseDice","rollTimes","parseDiceModifiers","sidesToken","parseExplode","parseCompareModifier","parseCritical","parseKeep","parseDrop","parseReroll","parseSort","stackTrace","Random","engines","mt19937","autoSeed","max","integer","GLOBAL_KEY","imul","al","bl","stringRepeat","String","repeat","y","pattern","engine","nativeMath","TypeError","data","proto","returnValue","add","addend","toInteger","convertSliceArgument","returnUndefined","Int32Array","refreshData","tmp","uses","next","getUseCount","discard","seed","initial","previous","seedWithArray","source","j","sourceLength","generateEntropyArray","browserCrypto","crypto","getRandomValues","array","Date","getTime","int32","uint32","uint53","uint53Full","high","int53","int53Full","isPowerOfTwoMinusOne","downscaleToRange","range","masking","maximum","extendedRange","upscaleWithinU53","highRange","ret","upscaleWithinI53AndLoopCheck","isFinite","RangeError","realZeroToOneInclusive","realZeroToOneExclusive","real","left","right","inclusive","multiplier","bool","isLeastBitTrue","lessThan","numerator","denominator","percentage","scaled","probability","pick","begin","end","start","finish","distribution","LOWER_HEX_POOL","lowerHex","upperHex","oldGlobal","picker","clone","shuffle","downTo","sample","population","sampleSize","tailLength","sideCount","dieCount","uuid4","zeroPad","string","zeroCount","pool","charAt","hex","toUpperCase","upper","date","define","amd","noConflict"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,GCAA,aAMA,IAJAN,EAAA,mBAIAW,MAGAC,QAAAF,OAAA,OAAA,CAAA,cACAG,WAAA,iBAAA,CAAA,SAAA,SAAAC,GACAA,EAAAC,KAAA,GACAD,EAAAE,SAAA,MAEAF,EAAAG,MAAA,GAGAH,EAAAI,SAAA,WAEA,IAAAH,EAAAD,EAAAC,KACA,IAAAA,IACAA,EAAA,QAKA,IAAAI,EAAA,IAAAC,SAAAL,GAEAM,QAAAC,IAAAH,EAAAI,YACAF,QAAAC,IAAAH,EAAAI,WAAAC,SAKAV,EAAAG,MAAAQ,KAAA,CACAC,MAAAP,EAAAI,WAAAJ,OACAQ,SAAAR,EAAAI,WAAAK,YACAb,KAAAA,IAGAM,QAAAC,IAAA,QAAAH,EAAAO,QAIAZ,EAAAe,QAAA,SAAAd,GACAD,EAAAC,KAAAA,EACAD,EAAAI,YAIAJ,EAAAgB,aAAA,SAAArC,GACA,IAAAA,EAAAsC,SACAjB,EAAAI,2DCpDA,aACAc,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAC,EAAAnC,EAAA,mBACAoC,EAAApC,EAAA,2BACAqC,EAAA,WACA,SAAAA,EAAAC,EAAAC,QACA,IAAAA,IAAAA,EAAA,MACAC,KAAAF,KAAAA,EACAE,KAAAD,OAAAA,EA4EA,OA1EAF,EAAAI,UAAAC,KAAA,WACA,IAAAC,EAAAH,KACAE,EAAAP,EAAAS,QAAAC,OAAAL,KAAAF,MAWA,OAVAE,KAAAM,YACAd,OAAAe,KAAAP,KAAAM,YAAAE,QAAA,SAAAC,GACAP,EAAAQ,aAAAD,EAAAN,EAAAG,WAAAG,MAGAT,KAAAW,UACAX,KAAAW,SAAAH,QAAA,SAAAI,GACAV,EAAAW,SAAAD,EAAAV,UAGAA,GAEAL,EAAAI,UAAAY,SAAA,SAAAC,GACA,OAAAd,KAAAe,YAAAD,IAEAjB,EAAAI,UAAAc,YAAA,SAAAD,EAAAE,GACA,GAAAF,EAAA,CACA,GAAAA,IAAAd,KACA,MAAA,IAAArC,MAAA,2CAEAqC,KAAAW,WACAX,KAAAW,SAAA,IAEAX,KAAAW,SAAAM,OAAAD,GAAAhB,KAAAW,SAAA3C,OAAA,EAAA8C,GACAA,EAAAf,OAAAC,KAEA,OAAAc,GAEAjB,EAAAI,UAAAiB,cAAA,WACAlB,KAAAW,cAAAQ,GAEAtB,EAAAI,UAAAmB,YAAA,SAAArC,GACA,OAAAA,EAAAgB,SAAAC,KACA,MAEAA,KAAAW,SAAAM,OAAAjB,KAAAW,SAAAU,QAAAtC,EAAA,IACAA,IAEAc,EAAAI,UAAAqB,UAAA,WACA,OAAAtB,KAAAD,QAEAF,EAAAI,UAAAsB,SAAA,SAAAP,GACA,IAAAhB,KAAAW,UAAAX,KAAAW,SAAA3C,QAAAgD,EACA,MAAA,IAAArD,MAAA,uBAAAqD,EAAA,oBAEA,OAAAhB,KAAAW,SAAAK,IAEAnB,EAAAI,UAAAuB,cAAA,WACA,OAAAxB,KAAAW,SAAAX,KAAAW,SAAA3C,OAAA,GAEA6B,EAAAI,UAAAwB,aAAA,SAAAC,IACA1B,KAAAW,UAAA,IAAAgB,QACAnB,QAAAkB,IAEA7B,EAAAI,UAAA2B,aAAA,SAAAC,GACA,OAAA7B,KAAAM,WAAAN,KAAAM,WAAAuB,QAAAV,GAEAtB,EAAAI,UAAAS,aAAA,SAAAmB,EAAAnC,GAKA,OAJAM,KAAAM,aACAN,KAAAM,WAAA,IAAAV,EAAAkC,gBAEA9B,KAAAM,WAAAuB,GAAAnC,EACAM,MAEAH,EAAAI,UAAA8B,OAAA,WACA,IAAA5B,EAAAH,KACAO,EAAAf,OAAAe,KAAAP,MAAAgC,OAAA,SAAAC,GAAA,MAAA,WAAAA,IACAC,EAAA,GAEA,OADA3B,EAAAC,QAAA,SAAAyB,GAAA,OAAAC,EAAAD,GAAA9B,EAAA8B,KACAC,GAEArC,EAhFA,GAkFA/B,EAAA+B,eAAAA,yECtFA,aACAL,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAyC,EAAA3E,EAAA,2BACA4C,EAAA,WACA,SAAAA,KAKA,OAHAA,EAAAC,OAAA,SAAAP,GACA,OAAA,IAAAqC,EAAAtC,eAAAC,IAEAM,EANA,GAQAtC,EAAAsC,QAAAA,qDCXA,aACA,SAAAgC,EAAAC,GACA,IAAA,IAAAxE,KAAAwE,EAAAvE,EAAAwE,eAAAzE,KAAAC,EAAAD,GAAAwE,EAAAxE,IAEA2B,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA0C,EAAA5E,EAAA,4BACA4E,EAAA5E,EAAA,oBACA4E,EAAA5E,EAAA,4BACA4E,EAAA5E,EAAA,6ICRA,aACAgC,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAoC,EACA,aAIAhE,EAAAgE,eAAAA,0BCPA,aAEA,IACAS,EAFA/C,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,KAEA6C,EA0BAzE,EAAAyE,WAAAzE,EAAAyE,SAAA,KAzBAA,EAAA,SAAA,YAAA,WACAA,EAAAA,EAAA,MAAA,SAAA,QACAA,EAAAA,EAAA,OAAA,UAAA,SACAA,EAAAA,EAAA,IAAA,OAAA,MACAA,EAAAA,EAAA,SAAA,YAAA,WACAA,EAAAA,EAAA,OAAA,UAAA,SACAA,EAAAA,EAAA,SAAA,YAAA,WACAA,EAAAA,EAAA,SAAA,YAAA,WACAA,EAAAA,EAAA,OAAA,UAAA,SACAA,EAAAA,EAAA,OAAA,UAAA,SACAA,EAAAA,EAAA,MAAA,SAAA,QACAA,EAAAA,EAAA,QAAA,WAAA,UACAA,EAAAA,EAAA,eAAA,kBAAA,iBACAA,EAAAA,EAAA,KAAA,QAAA,OACAA,EAAAA,EAAA,YAAA,eAAA,cACAA,EAAAA,EAAA,QAAA,WAAA,UACAA,EAAAA,EAAA,KAAA,QAAA,OACAA,EAAAA,EAAA,KAAA,QAAA,OACAA,EAAAA,EAAA,SAAA,YAAA,WACAA,EAAAA,EAAA,OAAA,UAAA,SACAA,EAAAA,EAAA,KAAA,QAAA,OACAA,EAAAA,EAAA,KAAA,QAAA,OACAA,EAAAA,EAAA,UAAA,aAAA,YACAA,EAAAA,EAAA,SAAA,YAAA,WACAA,EAAAA,EAAA,OAAA,UAAA,iCC5BA,aACA/C,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA8C,EAAAhF,EAAA,eACAiF,EAAAjF,EAAA,wCACAkF,EAAAlF,EAAA,4BACAmF,EAAAnF,EAAA,8BACAW,EAAA,WACA,SAAAA,EAAAyE,EAAAC,EAAAC,GACA9C,KAAA4C,UAAAA,EACA5C,KAAA6C,eAAAA,EACA7C,KAAA8C,UAAAA,EAsBA,OApBA3E,EAAA8B,UAAA1B,KAAA,SAAAwE,GACA,IAAAC,EAAAhD,KAAAiD,YAAAF,GACAG,EAAAlD,KAAAmD,aAAAH,GACAI,EAAApD,KAAAqD,oBAEAC,GADAtD,KAAAuD,kBACAL,EAAAM,SACA,OAAAJ,EAAAK,UAAAH,EAAAI,OAEAvF,EAAA8B,UAAAgD,YAAA,SAAAF,GACA,OAAA,IAAAL,EAAAiB,UAAAZ,IAEA5E,EAAA8B,UAAAkD,aAAA,SAAAH,GACA,OAAA,IAAAL,EAAAiB,WAAAZ,IAEA7E,EAAA8B,UAAAoD,kBAAA,WACA,OAAA,IAAAZ,EAAAoB,gBAAA7D,KAAA4C,UAAA5C,KAAA6C,eAAA7C,KAAA8C,YAEA3E,EAAA8B,UAAAsD,gBAAA,WACA,OAAA,IAAAf,EAAAsB,eAEA3F,EA1BA,GA4BAL,EAAAK,KAAAA,iJClCA,aACAqB,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAqE,EAAAvG,EAAA,UACAsG,EAAA,WACA,SAAAA,KAiNA,OA/MAA,EAAA7D,UAAA+D,SAAA,SAAAjF,GACA,OAAAA,EAAAe,MACA,KAAAiE,EAAAxB,SAAA0B,OAAA,OAAAjE,KAAAkE,eAAAnF,GACA,KAAAgF,EAAAxB,SAAA4B,IAAA,OAAAnE,KAAAoE,YAAArF,GACA,KAAAgF,EAAAxB,SAAA8B,SAAA,OAAArE,KAAAsE,iBAAAvF,GACA,KAAAgF,EAAAxB,SAAAgC,SAAA,OAAAvE,KAAAwE,iBAAAzF,GACA,KAAAgF,EAAAxB,SAAAkC,OAAA,OAAAzE,KAAA0E,eAAA3F,GACA,KAAAgF,EAAAxB,SAAAoC,OAAA,OAAA3E,KAAA4E,eAAA7F,GACA,KAAAgF,EAAAxB,SAAAsC,SAAA,OAAA7E,KAAA8E,iBAAA/F,GACA,KAAAgF,EAAAxB,SAAAwC,OAAA,OAAA/E,KAAAgF,eAAAjG,GACA,KAAAgF,EAAAxB,SAAApE,KAAA,OAAA6B,KAAAiF,aAAAlG,GACA,KAAAgF,EAAAxB,SAAA2C,UAAA,OAAAlF,KAAAmF,kBAAApG,GACA,KAAAgF,EAAAxB,SAAA3D,SAAA,OAAAoB,KAAAoF,iBAAArG,GACA,KAAAgF,EAAAxB,SAAA8C,SAAA,OAAArF,KAAAsF,iBAAAvG,GACA,KAAAgF,EAAAxB,SAAAgD,MAAA,OAAAvF,KAAAwF,cAAAzG,GACA,KAAAgF,EAAAxB,SAAAkD,OAAA,OAAAzF,KAAA0F,eAAA3G,GACA,KAAAgF,EAAAxB,SAAAoD,MAAA,OAAA3F,KAAA4F,cAAA7G,GACA,KAAAgF,EAAAxB,SAAAsD,QAAA,OAAA7F,KAAA8F,gBAAA/G,GACA,KAAAgF,EAAAxB,SAAAwD,eAAA,OAAA/F,KAAAgG,uBAAAjH,GACA,KAAAgF,EAAAxB,SAAA0D,KAAA,OAAAjG,KAAAkG,aAAAnH,GACA,KAAAgF,EAAAxB,SAAA4D,YAAA,OAAAnG,KAAAoG,oBAAArH,GACA,KAAAgF,EAAAxB,SAAA8D,QAAA,OAAArG,KAAAsG,gBAAAvH,GACA,KAAAgF,EAAAxB,SAAAgE,KAAA,OAAAvG,KAAAwG,aAAAzH,GACA,KAAAgF,EAAAxB,SAAAkE,KAAA,OAAAzG,KAAA0G,aAAA3H,GACA,KAAAgF,EAAAxB,SAAAoE,SAAA,OAAA3G,KAAA4G,iBAAA7H,GACA,KAAAgF,EAAAxB,SAAAsE,OAAA,OAAA7G,KAAA8G,eAAA/H,GACA,KAAAgF,EAAAxB,SAAAwE,KAAA,OAAA/G,KAAAgH,aAAAjI,GACA,QAAA,MAAA,IAAApB,MAAA,6BAGAmG,EAAA7D,UAAAiE,eAAA,SAAAnF,GACA,OAAAA,EAAA6C,aAAA,SAAAqF,YAEAnD,EAAA7D,UAAAmE,YAAA,SAAArF,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAAqE,iBAAA,SAAAvF,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAAuE,iBAAA,SAAAzF,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAAyE,eAAA,SAAA3F,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAA2E,eAAA,SAAA7F,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAA6E,iBAAA,SAAA/F,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAA+E,eAAA,SAAAjG,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAAgF,aAAA,SAAAlG,GACA,OAAA,IAAAA,EAAAyC,iBAAAzC,EAAAwC,SAAA,GAAAzB,OAAAiE,EAAAxB,SAAA3D,SACA,IAAAoB,KAAAmH,kBAAApI,GAAA,KAGAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAoH,mBAAArI,EAAAwC,SAAA,IAAA,IAAAvB,KAAAoH,mBAAArI,EAAAwC,SAAA,MAGAuC,EAAA7D,UAAAkF,kBAAA,SAAApG,GACA,IAAAsI,EAAAtI,EAAA6C,aAAA,SAAAqF,WACA,MAAA,SAAAI,EAAA,IAAAA,GAEAvD,EAAA7D,UAAAmF,iBAAA,SAAArG,GACA,OAAAA,EAAA6C,aAAA,SAAAqF,YAEAnD,EAAA7D,UAAAqF,iBAAA,SAAAvG,GACA,OAAAA,EAAA6C,aAAA,QAAA,IAAA5B,KAAAmH,kBAAApI,GAAA,KAEA+E,EAAA7D,UAAAuF,cAAA,SAAAzG,GACA,MAAA,IAAAiB,KAAAmH,kBAAApI,GAAA,KAEA+E,EAAA7D,UAAAyF,eAAA,SAAA3G,GAEA,OADAiB,KAAAkH,iBAAAnI,EAAA,GACAiB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,MAAAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAuC,EAAA7D,UAAA2F,cAAA,SAAA7G,GACA,OAAAiB,KAAAsH,2BAAAvI,EAAA,MAEA+E,EAAA7D,UAAA6F,gBAAA,SAAA/G,GACA,OAAAiB,KAAAsH,2BAAAvI,EAAA,MAEA+E,EAAA7D,UAAA+F,uBAAA,SAAAjH,GACA,OAAAiB,KAAAsH,2BAAAvI,EAAA,OAEA+E,EAAA7D,UAAAiG,aAAA,SAAAnH,GACA,OAAAiB,KAAAsH,2BAAAvI,EAAA,MAEA+E,EAAA7D,UAAAmG,oBAAA,SAAArH,GACA,OAAAiB,KAAAsH,2BAAAvI,EAAA,OAEA+E,EAAA7D,UAAAqG,gBAAA,SAAAvH,GACAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAAwI,EAAA,IAUA,OATAxI,EAAA6C,aAAA,cACA2F,GAAA,KAEAxI,EAAA6C,aAAA,eACA2F,GAAA,KAEA,EAAAxI,EAAAyC,kBACA+F,GAAAvH,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAAgG,GAEAzD,EAAA7D,UAAAuG,aAAA,SAAAzH,GACAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAAyI,EAAA,IAOA,MANA,YAAAzI,EAAA6C,aAAA,UACA4F,GAAA,KAEA,WAAAzI,EAAA6C,aAAA,UACA4F,GAAA,KAEAxH,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAAiG,GAEA1D,EAAA7D,UAAAyG,aAAA,SAAA3H,GACAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAA0I,EAAA,IAOA,MANA,YAAA1I,EAAA6C,aAAA,UACA6F,GAAA,KAEA,WAAA1I,EAAA6C,aAAA,UACA6F,GAAA,KAEAzH,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAAkG,GAEA3D,EAAA7D,UAAA2G,iBAAA,SAAA7H,GACAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAA2I,EAAA,IAUA,MATA,YAAA3I,EAAA6C,aAAA,UACA8F,GAAA,KAEA,YAAA3I,EAAA6C,aAAA,UACA8F,GAAA,KAEA,EAAA3I,EAAAyC,kBACAkG,GAAA1H,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAAmG,GAEA5D,EAAA7D,UAAA6G,eAAA,SAAA/H,GACAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAA4I,EAAA,IAOA,OANA5I,EAAA6C,aAAA,UACA+F,GAAA,KAEA,EAAA5I,EAAAyC,kBACAmG,GAAA3H,KAAAgE,SAAAjF,EAAAwC,SAAA,KAEAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAAoG,GAEA7D,EAAA7D,UAAA+G,aAAA,SAAAjI,GACAiB,KAAAkH,iBAAAnI,EAAA,GACA,IAAA6I,EAAA,IAOA,MANA,cAAA7I,EAAA6C,aAAA,eACAgG,GAAA,KAEA,eAAA7I,EAAA6C,aAAA,eACAgG,GAAA,KAEA5H,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAAqG,GAEA9D,EAAA7D,UAAAqH,2BAAA,SAAAvI,EAAA8I,GAEA,OADA7H,KAAAkH,iBAAAnI,EAAA,GACA,IAAAA,EAAAyC,gBACAqG,EAAA7H,KAAAgE,SAAAjF,EAAAwC,SAAA,IAGAvB,KAAAgE,SAAAjF,EAAAwC,SAAA,IAAA,IAAAsG,EAAA,IAAA7H,KAAAgE,SAAAjF,EAAAwC,SAAA,KAGAuC,EAAA7D,UAAAkH,kBAAA,SAAApI,GAEA,IADA,IAAA+I,EAAA,GACAC,EAAA,EAAAA,EAAAhJ,EAAAyC,gBAAAuG,IACA,EAAAA,IACAD,GAAA,MAEAA,GAAA9H,KAAAgE,SAAAjF,EAAAwC,SAAAwG,IAEA,OAAAD,GAEAhE,EAAA7D,UAAAmH,mBAAA,SAAArI,GACA,OAAA,IAAAA,EAAAyC,gBACAxB,KAAAgE,SAAAjF,GAGA,IAAAiB,KAAAgE,SAAAjF,GAAA,KAGA+E,EAAA7D,UAAAiH,iBAAA,SAAAnI,EAAAiJ,GACA,IAAAC,EAAAlJ,EAAAyC,gBACA,GAAAyG,EAAAD,EACA,MAAA,IAAArK,MAAA,YAAAoB,EAAAe,KAAA,iBAAAkI,EAAA,wBAAAC,EAAA,MAGAnE,EAlNA,GAoNAhG,EAAAgG,cAAAA,oCCvNA,aAIAtE,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IAHA,SAAA2C,GACA,IAAA,IAAAxE,KAAAwE,EAAAvE,EAAAwE,eAAAzE,KAAAC,EAAAD,GAAAwE,EAAAxE,IAGAuE,CAAA5E,EAAA,8ECLA,aAIAgC,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IAHA,SAAA2C,GACA,IAAA,IAAAxE,KAAAwE,EAAAvE,EAAAwE,eAAAzE,KAAAC,EAAAD,GAAAwE,EAAAxE,IAGAuE,CAAA5E,EAAA,0DCLA,aACAgC,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAwI,EAAA1K,EAAA,oCACAM,EAAAqK,2BAAA,IAAAD,EAAAE,uBACAtK,EAAAqK,2BAAA,MAAA,SAAA/E,EAAAiF,EAAAC,GACA,OAAAC,KAAAC,MAAApF,EAAAqF,SAAAJ,EAAA9G,SAAA,GAAA+G,KAEAxK,EAAAqK,2BAAA,KAAA,SAAA/E,EAAAiF,EAAAC,GACA,OAAAC,KAAAG,KAAAtF,EAAAqF,SAAAJ,EAAA9G,SAAA,GAAA+G,KAEAxK,EAAAqK,2BAAA,IAAA,SAAA/E,EAAAiF,EAAAC,GACA,OAAAC,KAAAI,IAAAvF,EAAAqF,SAAAJ,EAAA9G,SAAA,GAAA+G,KAEAxK,EAAAqK,2BAAA,MAAA,SAAA/E,EAAAiF,EAAAC,GACA,OAAAC,KAAAK,MAAAxF,EAAAqF,SAAAJ,EAAA9G,SAAA,GAAA+G,KAEAxK,EAAAqK,2BAAA,KAAA,SAAA/E,EAAAiF,EAAAC,GACA,OAAAC,KAAAM,KAAAzF,EAAAqF,SAAAJ,EAAA9G,SAAA,GAAA+G,mECjBA,aACA9I,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAqE,EAAAvG,EAAA,UACAgF,EAAAhF,EAAA,gBACAsL,EAAAtL,EAAA,aACAuL,EAAAvL,EAAA,kCACAwL,EAAAxL,EAAA,uBACAyL,EAAAzL,EAAA,yBACAqG,EAAA,WACA,SAAAA,EAAAjB,EAAAsG,EAAApG,GACA9C,KAAA4C,UAAAmG,EAAAZ,2BACA3I,OAAA2J,OAAAnJ,KAAA4C,UAAAA,GACA5C,KAAAkJ,OAAAA,GAAA,IAAAJ,EAAAM,sBACApJ,KAAA8C,UAAAA,GAAA,IAAAN,EAAAsB,cAggBA,OA9fAD,EAAA5D,UAAAwD,UAAA,SAAA1E,GACA,IAAAwI,EAAAxI,EAAAmB,OACAoI,EAAA,GACApJ,EAAAc,KAAAyI,SAAAlB,EAAAe,GACAe,EAAArJ,KAAAsJ,eAAA/B,EAAAe,GACAiB,EAAAvJ,KAAAwJ,cAAAjC,EAAAe,GACAmB,EAAAzJ,KAAA8C,UAAAkB,SAAAuD,GACA,OAAA,IAAAyB,EAAAU,WAAAnC,EAAAkC,EAAAvK,EAAAmK,EAAAE,EAAAjB,IAEAzE,EAAA5D,UAAAwI,SAAA,SAAA1J,EAAAuJ,GACA,IAAAvJ,EAEA,OADAuJ,EAAArJ,KAAA,IAAAgK,EAAAU,aAAA,wCAAA5K,IACA,EAEA,GAAAA,EAAAe,OAAAiE,EAAAxB,SAAA3D,SACA,OAAAoB,KAAA4J,iBAAA7K,EAAAuJ,GAEA,GAAAvJ,EAAAe,OAAAiE,EAAAxB,SAAA0B,OACA,OAAAjE,KAAA6J,eAAA9K,EAAAuJ,GAEA,GAAAvJ,EAAAe,OAAAiE,EAAAxB,SAAA2C,UACA,OAAAlF,KAAA8J,kBAAA/K,EAAAuJ,GAEA,IAAAvJ,EAAA6C,aAAA,SAAA,CACA,IAAAlC,EAAA,EACA,OAAAX,EAAAe,MACA,KAAAiE,EAAAxB,SAAA4B,IACAzE,EAAAM,KAAA+J,YAAAhL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAA8B,SACA3E,EAAAM,KAAAgK,iBAAAjL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAgC,SACA7E,EAAAM,KAAAiK,iBAAAlL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAkC,OACA/E,EAAAM,KAAAkK,eAAAnL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAoC,OACAjF,EAAAM,KAAAmK,eAAApL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAwC,OACArF,EAAAM,KAAAoK,eAAArL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAsC,SACAnF,EAAAM,KAAAqK,iBAAAtL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAApE,KACAuB,EAAAM,KAAAsK,aAAAvL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAA8C,SACA3F,EAAAM,KAAAuK,iBAAAxL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAgD,MACA7F,EAAAM,KAAAwK,cAAAzL,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAkD,OACA/F,EAAAM,KAAAyK,eAAA1L,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAA8D,QACA3G,EAAAM,KAAA0K,gBAAA3L,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAgE,KACA7G,EAAAM,KAAA2K,aAAA5L,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAkE,KACA/G,EAAAM,KAAA4K,aAAA7L,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAoE,SACAjH,EAAAM,KAAA6K,iBAAA9L,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAsE,OACAnH,EAAAM,KAAA8K,eAAA/L,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAwE,KACArH,EAAAM,KAAA+K,aAAAhM,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAoD,MACAjG,EAAAM,KAAAgL,cAAAjM,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAsD,QACAnG,EAAAM,KAAAiL,gBAAAlM,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAAwD,eACArG,EAAAM,KAAAkL,uBAAAnM,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAA0D,KACAvG,EAAAM,KAAAmL,aAAApM,EAAAuJ,GACA,MACA,KAAAvE,EAAAxB,SAAA4D,YACAzG,EAAAM,KAAAoL,oBAAArM,EAAAuJ,GACA,MACA,QAEA,OADAA,EAAArJ,KAAA,IAAAgK,EAAAU,aAAA,2BAAA5K,EAAAe,KAAA,KAAAf,IACA,EAEAA,EAAA2B,aAAA,QAAAhB,GAEA,OAAAX,EAAA6C,aAAA,UAEAiC,EAAA5D,UAAA8J,YAAA,SAAAhL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GAGAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAFA,GAIAzE,EAAA5D,UAAA+J,iBAAA,SAAAjL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GAGAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAFA,GAIAzE,EAAA5D,UAAAgK,iBAAA,SAAAlL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GAGAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAFA,GAIAzE,EAAA5D,UAAAiK,eAAA,SAAAnL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GAGAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAFA,GAIAzE,EAAA5D,UAAAkK,eAAA,SAAApL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GAGAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAFA,GAIAzE,EAAA5D,UAAAoK,iBAAA,SAAAtL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GAGAC,KAAA8C,IAAArL,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,IAFA,GAIAzE,EAAA5D,UAAAmK,eAAA,SAAArL,EAAAuJ,GACA,OAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,IAGAtI,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAFA,GAIAzE,EAAA5D,UAAA4J,eAAA,SAAA9K,EAAAuJ,GACA,OAAAvJ,EAAA6C,aAAA,UAEAiC,EAAA5D,UAAA6J,kBAAA,SAAA/K,EAAAuJ,GACA,OAAAvJ,EAAA6C,aAAA,UAEAiC,EAAA5D,UAAA2J,iBAAA,SAAA7K,EAAAuJ,GACA,OAAA,IAAAvJ,EAAA6C,aAAA,QACA7C,EAAA6C,aAAA,SAEA,GAEAiC,EAAA5D,UAAAqK,aAAA,SAAAvL,EAAAuJ,GACA,IAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAAgD,EAAA/C,KAAAK,MAAA5I,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,IACAiD,EAAAxM,EAAAwC,SAAA,GACAxC,EAAA2B,aAAA,QAAAV,KAAAyI,SAAA8C,EAAAjD,IACAvJ,EAAAmC,gBAEA,IADA,IAAAhC,EAAA,EACA6I,EAAA,EAAAA,EAAAuD,EAAAvD,IAAA,CACA,IAAAyD,EAAAxL,KAAAyL,eAAAF,EAAAjD,GACAvJ,EAAA8B,SAAA2K,GACAtM,GAAAc,KAAAyI,SAAA+C,EAAAlD,GAEA,OAAApJ,GAEA2E,EAAA5D,UAAAsK,iBAAA,SAAAxL,EAAAuJ,GACA,IAAAoD,EAAA3M,EAAA6C,aAAA,QAKA,OAJA,IAAApC,OAAAe,KAAAP,KAAA4C,WAAAvB,QAAAqK,IACApD,EAAArJ,KAAA,IAAAgK,EAAAU,aAAA,qBAAA+B,EAAA3M,IAEAiB,KAAA4C,UAAA8I,GAAA1L,KAAAjB,EAAAuJ,IAGAzE,EAAA5D,UAAAuK,cAAA,SAAAzL,EAAAuJ,GACA,IAAAnI,EAAAH,KACAd,EAAA,EAIA,OAHAH,EAAA0C,aAAA,SAAAb,GACA1B,GAAAiB,EAAAsI,SAAA7H,EAAA0H,KAEApJ,GAEA2E,EAAA5D,UAAAwK,eAAA,SAAA1L,EAAAuJ,GACA,IAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAAqD,EAAA5M,EAAAwC,SAAA,GACAqK,EAAA5L,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACAvI,EAAAhB,EAAAuC,YACAvB,EAAAqB,YAAArC,GAEA,IADA,IAAAG,EAAA,EACA6I,EAAA,EAAAA,EAAA6D,EAAA7D,IAAA,CACA,IAAA7H,EAAAyL,EAAAzL,OACAH,EAAAc,SAAAX,GACAhB,GAAAc,KAAAyI,SAAAvI,EAAAoI,GAEA,OAAApJ,GAEA2E,EAAA5D,UAAAyK,gBAAA,SAAA3L,EAAAuJ,GACA,IAAAnI,EAAAH,KACA,IAAAA,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAIAuD,EAJAC,EAAA9L,KAAA+L,oBAAAhN,EAAAuJ,GACA,IAAAwD,EACA,OAAA,EAGA,IAAAE,EAAAjN,EAAA6C,aAAA,aACA,EAAA7C,EAAAyC,kBACAqK,EAAA9M,EAAAwC,SAAA,IAEAvB,KAAAyI,SAAAqD,EAAAxD,GACA,IAAA2D,EAAA,GACA/M,EAAA,EACAqM,EAAAO,EAAAlK,aAAA,SAiBA,OAhBAkK,EAAArK,aAAA,SAAAyK,GACA,IAAAA,EAAAtK,aAAA,QAAA,CACA,IAAAuK,EAAAhM,EAAAsI,SAAAyD,EAAA5D,GAEA,IADApJ,GAAAiN,EACAN,GAAA1L,EAAAiM,mBAAAD,EAAAN,EAAAvD,IAAA6D,IAAAZ,GACAW,EAAA/L,EAAAsL,eAAAF,EAAAjD,GACA6D,EAAAhM,EAAAsI,SAAAyD,EAAA5D,GACA0D,IACAG,GAAA,GAEAjN,GAAAiN,EACAF,EAAAhN,KAAAiN,MAIAD,EAAAzL,QAAA,SAAA6L,GAAA,OAAAP,EAAAjL,SAAAwL,KACAnN,GAEA2E,EAAA5D,UAAA0K,aAAA,SAAA5L,EAAAuJ,GACA,IAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAAwD,EAAA9L,KAAA+L,oBAAAhN,EAAAuJ,GACA,IAAAwD,EACA,OAAA,EAEA,IAAAQ,EAAA,EAAAvN,EAAAyC,gBAAAxB,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAA,EACAxI,EAAAf,EAAA6C,aAAA,QACA5B,KAAAyI,SAAAqD,EAAAxD,GACA,IAAAiE,EAAAvM,KAAAwM,mBAAAV,EAAA,WAAAhM,EAAA,YAAA,aAAAwI,GAAAiE,MACAvE,EAAA,EACA9I,EAAA,EAWA,OAVAqN,EAAA/L,QAAA,SAAAjC,GACAyJ,EAAAsE,GACA/N,EAAAmC,aAAA,QAAA,GACAxB,GAAAX,EAAAqD,aAAA,UAGArD,EAAAmC,aAAA,QAAA,GAEAsH,MAEA9I,GAEA2E,EAAA5D,UAAA2K,aAAA,SAAA7L,EAAAuJ,GACA,IAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAAwD,EAAA9L,KAAA+L,oBAAAhN,EAAAuJ,GACA,IAAAwD,EACA,OAAA,EAEA,IAAAQ,EAAA,EAAAvN,EAAAyC,gBAAAxB,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GAAA,EACAxI,EAAAf,EAAA6C,aAAA,QACA5B,KAAAyI,SAAAqD,EAAAxD,GACA,IAAAiE,EAAAvM,KAAAwM,mBAAAV,EAAA,WAAAhM,EAAA,YAAA,aAAAwI,GAAAiE,MACAvE,EAAA,EACA9I,EAAA,EAWA,OAVAqN,EAAA/L,QAAA,SAAAjC,GACAyJ,EAAAsE,EACA/N,EAAAmC,aAAA,QAAA,IAGAnC,EAAAmC,aAAA,QAAA,GACAxB,GAAAX,EAAAqD,aAAA,UAEAoG,MAEA9I,GAEA2E,EAAA5D,UAAA4K,iBAAA,SAAA9L,EAAAuJ,GACA,IAAAnI,EAAAH,KACA,IAAAA,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAAwD,EAAA9L,KAAA+L,oBAAAhN,EAAAuJ,GACA,IAAAwD,EACA,OAAA,EAEA,IACAD,EADA/L,EAAAf,EAAA6C,aAAA,QAEA,EAAA7C,EAAAyC,gBACAqK,EAAA9M,EAAAwC,SAAA,IAGAsK,EAAA9H,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAoD,OACA,YAAA7F,GACAE,KAAAkH,iBAAA4E,EAAA,EAAAxD,GACAuD,EAAAhL,SAAAkD,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA0B,QAAAvD,aAAA,QAAAoL,EAAAlK,aAAA,YAGAiK,EAAAhL,SAAAkD,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA0B,QAAAvD,aAAA,QAAA,KAGAV,KAAAyI,SAAAqD,EAAAxD,GACA,IAAApJ,EAAA,EAQA,OAPA4M,EAAArK,aAAA,SAAAyK,GACA,IAAAC,EAAAhM,EAAAsI,SAAAyD,EAAA5D,GACAnI,EAAAiM,mBAAAD,EAAAN,EAAAvD,KACA4D,EAAAxL,aAAA,WAAAZ,GACAZ,GAAAiN,KAGAjN,GAEA2E,EAAA5D,UAAA6K,eAAA,SAAA/L,EAAAuJ,GACA,IAAAnI,EAAAH,KACA,IAAAA,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAIAuD,EAJAC,EAAA9L,KAAA+L,oBAAAhN,EAAAuJ,GACA,IAAAwD,EACA,OAAA,EAGA,IAAAW,EAAA1N,EAAA6C,aAAA,QACA,EAAA7C,EAAAyC,kBACAqK,EAAA9M,EAAAwC,SAAA,IAEAvB,KAAAyI,SAAAqD,EAAAxD,GACA,IAAApJ,EAAA,EACAqM,EAAAO,EAAAlK,aAAA,SAcA,OAbAkK,EAAArK,aAAA,SAAAyK,GACA,IAAAA,EAAAtK,aAAA,QAAA,CAEA,IADA,IAAAuK,EAAAhM,EAAAsI,SAAAyD,EAAA5D,IACAuD,GAAA1L,EAAAiM,mBAAAD,EAAAN,EAAAvD,IAAA,IAAA6D,KACAA,EAAAhM,EAAAuM,oBAAAnB,EAAAjD,IACAmE,KAIAP,EAAAxL,aAAA,QAAAyL,GACAjN,GAAAiN,KAGAjN,GAEA2E,EAAA5D,UAAA8K,aAAA,SAAAhM,EAAAuJ,GACA,IAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAAwD,EAAA9L,KAAA+L,oBAAAhN,EAAAuJ,GACA,IAAAwD,EACA,OAAA,EAEA,IAAAS,EAAAvM,KAAAwM,mBAAAV,EAAA/M,EAAA6C,aAAA,aAAA0G,GAGA,OAFAwD,EAAA5K,gBACAqL,EAAAA,MAAA/L,QAAA,SAAAjC,GAAA,OAAAuN,EAAAjL,SAAAtC,KACAgO,EAAArN,OAEA2E,EAAA5D,UAAA+K,cAAA,SAAAjM,EAAAuJ,GACA,OAAAtI,KAAA2M,gBAAA5N,EAAA,SAAA6N,EAAA5P,GAAA,OAAA4P,IAAA5P,GAAAsL,IAEAzE,EAAA5D,UAAAgL,gBAAA,SAAAlM,EAAAuJ,GACA,OAAAtI,KAAA2M,gBAAA5N,EAAA,SAAA6N,EAAA5P,GAAA,OAAAA,EAAA4P,GAAAtE,IAEAzE,EAAA5D,UAAAiL,uBAAA,SAAAnM,EAAAuJ,GACA,OAAAtI,KAAA2M,gBAAA5N,EAAA,SAAA6N,EAAA5P,GAAA,OAAAA,GAAA4P,GAAAtE,IAEAzE,EAAA5D,UAAAkL,aAAA,SAAApM,EAAAuJ,GACA,OAAAtI,KAAA2M,gBAAA5N,EAAA,SAAA6N,EAAA5P,GAAA,OAAA4P,EAAA5P,GAAAsL,IAEAzE,EAAA5D,UAAAmL,oBAAA,SAAArM,EAAAuJ,GACA,OAAAtI,KAAA2M,gBAAA5N,EAAA,SAAA6N,EAAA5P,GAAA,OAAA4P,GAAA5P,GAAAsL,IAEAzE,EAAA5D,UAAAqJ,eAAA,SAAAvK,EAAAuJ,GACA,OAAAtI,KAAA6M,sBAAA9N,EAAA,SAAAmN,GAAA,OAAAA,EAAAtK,aAAA,YAAA0G,IAEAzE,EAAA5D,UAAAuJ,cAAA,SAAAzK,EAAAuJ,GACA,OAAAtI,KAAA6M,sBAAA9N,EAAA,SAAAmN,GAAA,OAAAA,EAAAtK,aAAA,YAAA0G,IAEAzE,EAAA5D,UAAA4M,sBAAA,SAAA9N,EAAA8M,EAAAvD,GACA,IAAAnI,EAAAH,KACAd,EAAA,EAaA,OAZAH,EAAAe,OAAAiE,EAAAxB,SAAApE,MAAAY,EAAAe,OAAAiE,EAAAxB,SAAAgD,MACAxG,EAAA0C,aAAA,SAAAyK,IACAA,EAAAtK,aAAA,SAAAiK,EAAAK,IACAhN,MAKAH,EAAA0C,aAAA,SAAAyK,GACAhN,GAAAiB,EAAA0M,sBAAAX,EAAAL,EAAAvD,KAGApJ,GAEA2E,EAAA5D,UAAAiH,iBAAA,SAAAnI,EAAAiJ,EAAAM,GACA,IAAAL,EAAAlJ,EAAAyC,gBACA,GAAAyG,EAAAD,EAAA,CACA,IAAA8E,EAAA,IAAA7D,EAAAU,aAAA,YAAA5K,EAAAe,KAAA,iBAAAkI,EAAA,wBAAAC,EAAA,IAAAlJ,GAEA,OADAuJ,EAAArJ,KAAA6N,IACA,EAEA,OAAA,GAEAjJ,EAAA5D,UAAAmM,mBAAA,SAAAT,EAAA5M,EAAAuJ,GACA,IAAAtI,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,OAAAvJ,EAAAe,MACA,KAAAiE,EAAAxB,SAAAoD,MAAA,OAAAgG,IAAA3L,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACA,KAAAvE,EAAAxB,SAAAsD,QAAA,OAAA8F,EAAA3L,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACA,KAAAvE,EAAAxB,SAAAwD,eAAA,OAAA4F,GAAA3L,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACA,KAAAvE,EAAAxB,SAAA0D,KAAA,OAAA0F,EAAA3L,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACA,KAAAvE,EAAAxB,SAAA4D,YAAA,OAAAwF,GAAA3L,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACA,QAEA,OADAA,EAAArJ,KAAA,IAAAgK,EAAAU,aAAA,qCAAA5K,EAAAe,KAAA,KAAAf,KACA,IAGA8E,EAAA5D,UAAA0M,gBAAA,SAAA5N,EAAAgO,EAAAzE,GACA,IAAAnI,EAAAH,KACA,IAAAA,KAAAkH,iBAAAnI,EAAA,EAAAuJ,GACA,OAAA,EAEA,IAAA0E,EAAAhN,KAAAyI,SAAA1J,EAAAwC,SAAA,GAAA+G,GACApJ,EAAA,EACA+N,EAAAjN,KAAA+L,oBAAAhN,EAAAuJ,GACA,OAAA2E,GAGAA,EAAAxL,aAAA,SAAAyK,GACA,IAAAA,EAAAtK,aAAA,QAAA,CACA,IAAAyF,EAAAlH,EAAAsI,SAAAyD,EAAA5D,GACA4E,EAAAH,EAAA5M,EAAAsI,SAAAyD,EAAA5D,GAAA0E,GACAd,EAAAxL,aAAA,UAAAwM,GACAA,IACAhO,GAAAmI,MAIAnI,GAZA,GAcA2E,EAAA5D,UAAA8L,oBAAA,SAAAhN,EAAAuJ,GACA,GAAAvJ,EAAAe,OAAAiE,EAAAxB,SAAApE,MAAAY,EAAAe,OAAAiE,EAAAxB,SAAAgD,MACA,OAAAxG,EAEA,GAAAA,EAAAyC,gBAAA,EAEA,OADA8G,EAAArJ,KAAA,IAAAgK,EAAAU,aAAA,2BAAA5K,IACA,KAEA,IAAA6B,EAAA7B,EAAAwC,SAAA,GAEA,OADAvB,KAAAyI,SAAA7H,EAAA0H,GACAtI,KAAA+L,oBAAAnL,EAAA0H,IAEAzE,EAAA5D,UAAAuM,mBAAA,SAAAV,EAAAqB,EAAA7E,GACA,IAMA8E,EANAjN,EAAAH,KACAqN,EAAA,CAAAd,MAAA,GAAArN,MAAA,GAgBA,OAfA4M,EAAArK,aAAA,SAAAyK,GACAmB,EAAAd,MAAAtN,KAAAiN,GACAmB,EAAAnO,OAAAiB,EAAAsI,SAAAyD,EAAA5D,KAGA,eAAA6E,EACAC,EAAA,SAAA1P,EAAA4P,GAAA,OAAAA,EAAA1L,aAAA,SAAAlE,EAAAkE,aAAA,UAEA,cAAAuL,EACAC,EAAA,SAAA1P,EAAA4P,GAAA,OAAA5P,EAAAkE,aAAA,SAAA0L,EAAA1L,aAAA,UAGA0G,EAAArJ,KAAA,IAAAgK,EAAAU,aAAA,2BAAAwD,EAAA,0CAAArB,IAEAuB,EAAAd,MAAAc,EAAAd,MAAA3E,KAAAwF,GACAC,GAEAxJ,EAAA5D,UAAAwL,eAAA,SAAAF,EAAAjD,GACAiD,aAAAxH,EAAAlE,gBACA0L,EAAA3J,aAAA,SADA,IAGA4J,EAAAxL,KAAA0M,oBAAAnB,EAAAjD,GACA,OAAAvE,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA3D,UACA8B,aAAA,QAAA8K,GACA9K,aAAA,QAAA,IAEAmD,EAAA5D,UAAAyM,oBAAA,SAAAnB,EAAAjD,GACA,IAAAiF,EAAA,EAAAC,EAAA,EAWA,MAPA,UAHAjC,aAAAxH,EAAAlE,eACA0L,EAAA3J,aAAA,SACA2J,IAEAgC,GAAA,EACAC,EAAA,GAGAA,EAAAjF,KAAAK,MAAA2C,aAAAxH,EAAAlE,eAAAG,KAAAyI,SAAA8C,EAAAjD,GAAAiD,GAEAvL,KAAAkJ,OAAAuE,cAAAF,EAAAC,IAEA3J,EArgBA,GAugBA/F,EAAA+F,gBAAAA,6JC/gBA,aACA,IACA6J,EADAC,EAAA3N,MAAAA,KAAA2N,YACAD,EAAAlO,OAAAoO,gBACA,CAAAC,UAAA,cAAAC,OAAA,SAAAC,EAAAT,GAAAS,EAAAF,UAAAP,IACA,SAAAS,EAAAT,GAAA,IAAA,IAAAzP,KAAAyP,EAAAA,EAAAhL,eAAAzE,KAAAkQ,EAAAlQ,GAAAyP,EAAAzP,KACA,SAAAkQ,EAAAT,GAEA,SAAAU,IAAAhO,KAAAiO,YAAAF,EADAL,EAAAK,EAAAT,GAEAS,EAAA9N,UAAA,OAAAqN,EAAA9N,OAAAa,OAAAiN,IAAAU,EAAA/N,UAAAqN,EAAArN,UAAA,IAAA+N,KAGAxO,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IACAgK,EAAA,SAAAwE,GAEA,SAAAxE,EAAA3K,EAAA0K,EAAAvK,EAAAmK,EAAA8E,EAAA7F,GACA,IAAAnI,EAAA+N,EAAAnQ,KAAAiC,KAAAjB,EAAA0K,EAAAvK,IAAAc,KAIA,OAHAG,EAAAkJ,UAAAA,EACAlJ,EAAAgO,SAAAA,EACAhO,EAAAmI,OAAAA,EACAnI,EAEA,OARAwN,EAAAjE,EAAAwE,GAQAxE,EATA,CADAlM,EAAA,kBAWA4Q,QACAtQ,EAAA4L,WAAAA,8CCxBA,aACAlK,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAiK,EACA,SAAA0E,EAAAtP,EAAAuP,QACA,IAAAA,IAAAA,GAAA,IAAA3Q,OAAA,OACAqC,KAAAqO,QAAAA,GAIAvQ,EAAA6L,aAAAA,2BCTA,aACAnK,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA0I,EACA,aAIAtK,EAAAsK,uBAAAA,2BCPA,aACA5I,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA0O,EACA,SAAAG,EAAA9E,EAAAvK,GACAc,KAAAuO,kBAAAA,EACAvO,KAAAyJ,mBAAAA,EACAzJ,KAAAd,MAAAA,GAIApB,EAAAsQ,OAAAA,2BCVA,aACA5O,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA8O,EAAAhR,EAAA,mCACAiR,EAAAjR,EAAA,iBACAkR,EAAAlR,EAAA,qBACAmG,EAAA,WACA,SAAAA,EAAAZ,GAGA,GAFA/C,KAAA2O,aAAA,QACA3O,KAAA4O,YAAA,WACA5O,KAAA6O,kBAAA9L,GACA/C,KAAA8O,OAAA/L,MAEA,CAAA,GAAA,iBAAAA,EAIA,MAAA,IAAApF,MAAA,8EAHAqC,KAAA8O,OAAA,IAAAN,EAAAO,sBAAAhM,IAmHA,OA7GAY,EAAA1D,UAAA4O,kBAAA,SAAA9L,GACA,OAAAA,EAAAiM,qBAEArL,EAAA1D,UAAAgP,cAAA,WAIA,OAHAjP,KAAAkP,YACAlP,KAAAkP,UAAAlP,KAAAmP,sBAEAnP,KAAAkP,WAEAvL,EAAA1D,UAAAmP,aAAA,WAQA,OAPApP,KAAAkP,WACAlP,KAAAqP,aAAArP,KAAAkP,UACAlP,KAAAkP,UAAA,MAGAlP,KAAAqP,aAAArP,KAAAmP,qBAEAnP,KAAAqP,cAEA1L,EAAA1D,UAAAqP,gBAAA,WAEA,IADA,IAAAxH,EAAA9H,KAAA8O,OAAAE,sBACAhP,KAAA4O,YAAAW,KAAAvP,KAAA8O,OAAAU,sBACA1H,GAAA9H,KAAA8O,OAAAW,mBAEA,OAAAzP,KAAA0P,YAAAhB,EAAAiB,UAAAC,WAAA9H,IAEAnE,EAAA1D,UAAA4P,YAAA,WAIA,IAHA,IAAA/H,EAAA9H,KAAA8O,OAAAE,sBACAc,GAAA,EACAC,EAAA/P,KAAA8O,OAAAU,oBACA,MAAAO,GAAA/P,KAAA2O,aAAAY,KAAAQ,IAAA,CACA,GAAA,MAAAA,EAAA,CACA,GAAAD,EACA,MAEAA,GAAA,EAEAhI,GAAA9H,KAAA8O,OAAAW,mBACAM,EAAA/P,KAAA8O,OAAAU,oBAEA,OAAAxP,KAAA0P,YAAAhB,EAAAiB,UAAA1L,OAAA6D,IAEAnE,EAAA1D,UAAA+P,cAAA,WACA,IAAA,IAAAjI,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,GAAA,MAAA/H,KAAA8O,OAAAU,oBACA,MAAA,IAAA7R,MAAA,+BAEAqC,KAAA8O,OAAAW,mBAEA,OAAAzP,KAAA0P,YAAAhB,EAAAiB,UAAAM,SAAA,QAEAtM,EAAA1D,UAAAkP,mBAAA,WAEA,IADA,IAAAe,EACAA,EAAAlQ,KAAA8O,OAAAW,oBACA,QAAA,GACA,KAAAzP,KAAA4O,YAAAW,KAAAW,GAAA,OAAAlQ,KAAAsP,kBACA,KAAAtP,KAAA2O,aAAAY,KAAAW,GAAA,OAAAlQ,KAAA6P,cACA,IAAA,MAAAK,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAQ,UAAAD,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAS,WAAAF,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAU,MAAAH,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAW,gBAAAJ,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAY,iBAAAL,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAa,OAAAN,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAc,KAAAP,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAe,MAAAR,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAgB,MAAAT,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAiB,QAAAV,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAkB,YAAAX,GACA,IAAA,MAAAA,EAAA,OAAAlQ,KAAAgQ,gBACA,IAAA,MAAAE,EACA,MAAA,MAAAlQ,KAAA8O,OAAAU,qBACAxP,KAAA8O,OAAAW,mBACAzP,KAAA0P,YAAAhB,EAAAiB,UAAAmB,eAAAZ,EAAAlQ,KAAA8O,OAAAE,wBAGAhP,KAAA0P,YAAAhB,EAAAiB,UAAAoB,SAAAb,GAEA,IAAA,MAAAA,EACA,MAAA,MAAAlQ,KAAA8O,OAAAU,qBACAxP,KAAA8O,OAAAW,mBACAzP,KAAA0P,YAAAhB,EAAAiB,UAAA5J,eAAAmK,EAAAlQ,KAAA8O,OAAAE,wBAGAhP,KAAA0P,YAAAhB,EAAAiB,UAAA9J,QAAAqK,GAEA,IAAA,MAAAA,EACA,MAAA,MAAAlQ,KAAA8O,OAAAU,qBACAxP,KAAA8O,OAAAW,mBACAzP,KAAA0P,YAAAhB,EAAAiB,UAAAxJ,YAAA+J,EAAAlQ,KAAA8O,OAAAE,wBAGAhP,KAAA0P,YAAAhB,EAAAiB,UAAA1J,KAAAiK,GAEA,IAAA,KAAAX,KAAAW,GAEA,MACA,QAAA,MAAA,IAAAvS,MAAA,mBAAAuS,EAAA,MAIA,OAAAlQ,KAAA0P,YAAAhB,EAAAiB,UAAAqB,aAEArN,EAAA1D,UAAAyP,YAAA,SAAA5P,EAAAJ,GACA,IAAAuR,EAAAjR,KAAA8O,OAAAoC,qBAIA,OAHAxR,IACAuR,GAAAvR,EAAA1B,OAAA,GAEA,IAAAyQ,EAAA0C,MAAArR,EAAAmR,EAAAvR,IAEAiE,EA3HA,GA6HA7F,EAAA6F,UAAAA,yGClIA,aACA,SAAAvB,EAAAC,GACA,IAAA,IAAAxE,KAAAwE,EAAAvE,EAAAwE,eAAAzE,KAAAC,EAAAD,GAAAwE,EAAAxE,IAEA2B,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA0C,EAAA5E,EAAA,oCACA4E,EAAA5E,EAAA,uBACA4E,EAAA5E,EAAA,wCACA4E,EAAA5E,EAAA,sBACA4E,EAAA5E,EAAA,0LCTA,aACA,IACAkQ,EADAC,EAAA3N,MAAAA,KAAA2N,YACAD,EAAAlO,OAAAoO,gBACA,CAAAC,UAAA,cAAAC,OAAA,SAAAC,EAAAT,GAAAS,EAAAF,UAAAP,IACA,SAAAS,EAAAT,GAAA,IAAA,IAAAzP,KAAAyP,EAAAA,EAAAhL,eAAAzE,KAAAkQ,EAAAlQ,GAAAyP,EAAAzP,KACA,SAAAkQ,EAAAT,GAEA,SAAAU,IAAAhO,KAAAiO,YAAAF,EADAL,EAAAK,EAAAT,GAEAS,EAAA9N,UAAA,OAAAqN,EAAA9N,OAAAa,OAAAiN,IAAAU,EAAA/N,UAAAqN,EAAArN,UAAA,IAAA+N,KAGAxO,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA0R,EAAA,SAAAlD,GAEA,SAAAkD,IACA,OAAAlD,EAAAnQ,KAAAiC,KAAA,mDAAAA,KAEA,OAJA2N,EAAAyD,EAAAlD,GAIAkD,EALA,CAMAzT,OACAG,EAAAsT,yBAAAA,2BCnBA,aACA5R,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAqP,EAAA,WACA,SAAAA,EAAAhM,GACA/C,KAAA+C,MAAAA,EACA/C,KAAAgB,OAAA,EAwBA,OAtBA+N,EAAA9O,UAAAiR,mBAAA,WACA,OAAAlR,KAAAgB,OAEA+N,EAAA9O,UAAAwP,iBAAA,WAEA,OADAzP,KAAAgB,MAAAuH,KAAA8I,IAAArR,KAAAgB,MAAA,EAAAhB,KAAA+C,MAAA/E,QACAgC,KAAAgB,OAAAhB,KAAA+C,MAAA/E,OACA,KAEAgC,KAAA+C,MAAA/C,KAAAgB,QAEA+N,EAAA9O,UAAA+O,oBAAA,WACA,OAAAhP,KAAAgB,MAAA,GAAAhB,KAAAgB,OAAAhB,KAAA+C,MAAA/E,OACA,KAEAgC,KAAA+C,MAAA/C,KAAAgB,QAEA+N,EAAA9O,UAAAuP,kBAAA,WACA,OAAAxP,KAAAgB,OAAAhB,KAAA+C,MAAA/E,OACA,KAEAgC,KAAA+C,MAAA/C,KAAAgB,MAAA,IAEA+N,EA3BA,GA6BAjR,EAAAiR,sBAAAA,2BC/BA,aAEA,IACAY,EAFAnQ,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,KAEAiQ,EAsBA7R,EAAA6R,YAAA7R,EAAA6R,UAAA,KArBAA,EAAA,OAAA,KAAA,SACAA,EAAAA,EAAA,QAAA,KAAA,UACAA,EAAAA,EAAA,eAAA,MAAA,iBACAA,EAAAA,EAAA,KAAA,KAAA,OACAA,EAAAA,EAAA,YAAA,MAAA,cACAA,EAAAA,EAAA,WAAA,KAAA,aACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,MAAA,KAAA,QACAA,EAAAA,EAAA,SAAA,OAAA,WACAA,EAAAA,EAAA,WAAA,cAAA,aACAA,EAAAA,EAAA,KAAA,KAAA,OACAA,EAAAA,EAAA,MAAA,KAAA,QACAA,EAAAA,EAAA,eAAA,MAAA,iBACAA,EAAAA,EAAA,QAAA,KAAA,UACAA,EAAAA,EAAA,SAAA,KAAA,WACAA,EAAAA,EAAA,MAAA,KAAA,QACAA,EAAAA,EAAA,OAAA,UAAA,SACAA,EAAAA,EAAA,iBAAA,KAAA,mBACAA,EAAAA,EAAA,gBAAA,KAAA,kBACAA,EAAAA,EAAA,WAAA,cAAA,aACAA,EAAAA,EAAA,YAAA,KAAA,uCCxBA,aACAnQ,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAyR,EACA,SAAArR,EAAAmR,EAAAvR,GACAM,KAAAF,KAAAA,EACAE,KAAAiR,SAAAA,EACAjR,KAAAN,MAAAA,GAIA5B,EAAAqT,MAAAA,2BCVA,aACA3R,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA4R,EAAA9T,EAAA,YACAyL,EAAAzL,EAAA,yBACA+T,EAAA,WACA,SAAAA,EAAAxO,GACA,GAAA/C,KAAAwR,QAAAzO,GACA/C,KAAAgD,MAAAD,MAEA,CAAA,GAAA,iBAAAA,EAIA,MAAA,IAAApF,MAAA,oEAHAqC,KAAAgD,MAAA,IAAAsO,EAAA3N,UAAAZ,IA4BA,OAtBAwO,EAAAtR,UAAAuR,QAAA,SAAAzO,GACA,OAAAA,EAAAqM,cAEAmC,EAAAtR,UAAAwR,iBAAA,SAAA9S,EAAA+S,EAAAC,GAEA,OADA3R,KAAA4R,OAAAjT,EAAA+S,EAAAC,GACA3R,KAAAgD,MAAAoM,gBAEAmC,EAAAtR,UAAA2R,OAAA,SAAAjT,EAAA+S,EAAAC,GAKA,OAJAA,EAAAA,GAAA3R,KAAAgD,MAAAiM,iBACAnP,OAAA4R,GACA1R,KAAA6R,WAAAlT,EAAA+S,EAAAC,GAEAA,GAEAJ,EAAAtR,UAAA4R,WAAA,SAAAlT,EAAA+S,EAAAC,GACA,IAAAtD,EAAA,qBAAAsD,EAAAV,SAAA,IACA5C,GAAA,2BAAAqD,EAAA,yBAAAC,EAAA7R,KAAA,cAAA6R,EAAAjS,MAAA,KACAM,KAAA8R,aAAAnT,EAAA0P,EAAAsD,IAEAJ,EAAAtR,UAAA6R,aAAA,SAAAnT,EAAA0P,EAAA0D,GACApT,EAAA2J,OAAArJ,KAAA,IAAAgK,EAAAU,aAAA0E,EAAA0D,GAAA,IAAApU,OAAA2Q,SAEAiD,EAlCA,GAoCAzT,EAAAyT,YAAAA,mECxCA,aACA,IACA7D,EADAC,EAAA3N,MAAAA,KAAA2N,YACAD,EAAAlO,OAAAoO,gBACA,CAAAC,UAAA,cAAAC,OAAA,SAAAC,EAAAT,GAAAS,EAAAF,UAAAP,IACA,SAAAS,EAAAT,GAAA,IAAA,IAAAzP,KAAAyP,EAAAA,EAAAhL,eAAAzE,KAAAkQ,EAAAlQ,GAAAyP,EAAAzP,KACA,SAAAkQ,EAAAT,GAEA,SAAAU,IAAAhO,KAAAiO,YAAAF,EADAL,EAAAK,EAAAT,GAEAS,EAAA9N,UAAA,OAAAqN,EAAA9N,OAAAa,OAAAiN,IAAAU,EAAA/N,UAAAqN,EAAArN,UAAA,IAAA+N,KAGAxO,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAqE,EAAAvG,EAAA,UACA8T,EAAA9T,EAAA,YACAwU,EAAAxU,EAAA,wBACAyU,EAAAzU,EAAA,wBACA0U,EAAA,GACAA,EAAAZ,EAAA3B,UAAAa,QAAAzM,EAAAxB,SAAAoD,MACAuM,EAAAZ,EAAA3B,UAAA9J,SAAA9B,EAAAxB,SAAAsD,QACAqM,EAAAZ,EAAA3B,UAAA1J,MAAAlC,EAAAxB,SAAA0D,KACAiM,EAAAZ,EAAA3B,UAAA5J,gBAAAhC,EAAAxB,SAAAwD,eACAmM,EAAAZ,EAAA3B,UAAAxJ,aAAApC,EAAAxB,SAAA4D,YACA,IAAAgM,EAAA,GACAA,EAAAb,EAAA3B,UAAAc,MAAA1M,EAAAxB,SAAA4B,IACAgO,EAAAb,EAAA3B,UAAAgB,OAAA5M,EAAAxB,SAAA8B,SACA,IAAA+N,EAAA,GACAA,EAAAd,EAAA3B,UAAAmB,gBAAA/M,EAAAxB,SAAAsC,SACAuN,EAAAd,EAAA3B,UAAAoB,UAAAhN,EAAAxB,SAAAgC,SACA6N,EAAAd,EAAA3B,UAAAe,OAAA3M,EAAAxB,SAAAkC,OACA2N,EAAAd,EAAA3B,UAAAiB,SAAA7M,EAAAxB,SAAAoC,OACA,IAAAf,EAAA,SAAAsK,GAEA,SAAAtK,EAAAb,GACA,OAAAmL,EAAAnQ,KAAAiC,KAAA+C,IAAA/C,KAgaA,OAlaA2N,EAAA/J,EAAAsK,GAIAtK,EAAA3D,UAAAuD,MAAA,WACA,IAAA7E,EAAA,IAAAsT,EAAAI,YAEA,OADA1T,EAAA+E,KAAA1D,KAAAsS,gBAAA3T,GACAA,GAEAiF,EAAA3D,UAAAqS,gBAAA,SAAA3T,GACA,IAAA+E,EAAA1D,KAAAuS,sBAAA5T,GACA6T,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KACA,IAAA,EAAAN,OAAAe,KAAA2R,GAAA7Q,QAAAmR,EAAAvL,YAAA,CACA,IAAAwL,EAAA1O,EAAA3D,QAAAC,OAAA6R,EAAAM,IACAxS,KAAAgD,MAAAoM,eACAqD,EAAA5R,SAAA6C,GACA+O,EAAA5R,SAAAb,KAAAuS,sBAAA5T,IACA+E,EAAA+O,EAEA,OAAA/O,GAEAE,EAAA3D,UAAAsS,sBAAA,SAAA5T,GACA,IAAA6T,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,MACA,EAAAN,OAAAe,KAAA4R,GAAA9Q,QAAAmR,EAAAvL,aACAjH,KAAAgD,MAAAoM,eAEA,IAAA1L,EAAA1D,KAAA0S,UAAA/T,GACA,GAAA6T,IAAAlB,EAAA3B,UAAAgB,MAAA,CACA,IAAAgC,EAAA5O,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAwC,QACA4N,EAAA9R,SAAA6C,GACAA,EAAAiP,EAGA,IADAH,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,MACA,EAAAN,OAAAe,KAAA4R,GAAA9Q,QAAAmR,EAAAvL,aAAA,CACA,IAAAwL,EAAA1O,EAAA3D,QAAAC,OAAA8R,EAAAK,IACAC,EAAA5R,SAAA6C,GAEA1D,KAAAgD,MAAAoM,eACAqD,EAAA5R,SAAAb,KAAA0S,UAAA/T,IACA+E,EAAA+O,EACAD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAEA,OAAA4D,GAEAE,EAAA3D,UAAAyS,UAAA,SAAA/T,GAGA,IAFA,IAAA+E,EAAA1D,KAAA4S,YAAAjU,GACA6T,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,MACA,EAAAN,OAAAe,KAAA6R,GAAA/Q,QAAAmR,EAAAvL,aAAA,CACA,IAAAwL,EAAA1O,EAAA3D,QAAAC,OAAA+R,EAAAI,IACAC,EAAA5R,SAAA6C,GAEA1D,KAAAgD,MAAAoM,eACAqD,EAAA5R,SAAAb,KAAA4S,YAAAjU,IACA+E,EAAA+O,EACAD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAEA,OAAA4D,GAEAE,EAAA3D,UAAA2S,YAAA,SAAAjU,GACA,IAAA+E,EACAqO,EAAA/R,KAAAgD,MAAAiM,gBACA,OAAA8C,EAAAjS,MACA,KAAAwR,EAAA3B,UAAAC,WACAlM,EAAA1D,KAAA6S,cAAAlU,GACA,MACA,KAAA2S,EAAA3B,UAAAW,gBACA5M,EAAA1D,KAAA8S,yBAAAnU,GACAqB,KAAAgD,MAAAiM,gBAAAnP,OAAAwR,EAAA3B,UAAAC,aACAlM,EAAA1D,KAAA+S,cAAApU,EAAA+E,IAEA,MACA,KAAA4N,EAAA3B,UAAAQ,UACAzM,EAAA1D,KAAAgT,WAAArU,GACA,MACA,KAAA2S,EAAA3B,UAAA1L,OACA,IAAAgP,EAAAjT,KAAA6P,YAAAlR,GAEA+E,EADA1D,KAAAgD,MAAAiM,gBAAAnP,OAAAwR,EAAA3B,UAAAC,WACAqD,EAGAjT,KAAA+S,cAAApU,EAAAsU,GAEA,MACA,QAAAjT,KAAA6R,WAAAlT,EAAA2S,EAAA3B,UAAA1L,OAAA8N,GAEA,OAAArO,GAEAE,EAAA3D,UAAAiT,kBAAA,SAAAvU,GACA,IAAAoT,EAAA/R,KAAAgD,MAAAiM,gBACA,OAAA8C,EAAAjS,MACA,KAAAwR,EAAA3B,UAAA1L,OAAA,OAAAjE,KAAA6P,YAAAlR,GACA,KAAA2S,EAAA3B,UAAAW,gBAAA,OAAAtQ,KAAA8S,yBAAAnU,GACA,QAAAqB,KAAA6R,WAAAlT,EAAA2S,EAAA3B,UAAA1L,OAAA8N,KAGAnO,EAAA3D,UAAA4S,cAAA,SAAAlU,GACA,IAAAwU,EAAAnT,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAAC,YACAlM,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA8C,UACA3E,aAAA,OAAAyS,EAAAzT,OAIA,GAHAM,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAAW,iBAEAtQ,KAAAgD,MAAAiM,gBACAnP,OAAAwR,EAAA3B,UAAAY,iBAEA,IADA7M,EAAA7C,SAAAb,KAAAsS,gBAAA3T,IACAqB,KAAAgD,MAAAiM,gBAAAnP,OAAAwR,EAAA3B,UAAAU,OACArQ,KAAAgD,MAAAoM,eACA1L,EAAA7C,SAAAb,KAAAsS,gBAAA3T,IAIA,OADAqB,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAAY,kBACA7M,GAEAE,EAAA3D,UAAA4P,YAAA,SAAAlR,GACA,IAAAyU,EAAApT,KAAAgD,MAAAoM,eACA,OAAArL,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA0B,QACAvD,aAAA,QAAAuD,OAAAmP,EAAA1T,SAEAkE,EAAA3D,UAAA6S,yBAAA,SAAAnU,GACAqB,KAAAgD,MAAAoM,eACA,IAAA1L,EAAA1D,KAAAsS,gBAAA3T,GAEA,OADAqB,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAAY,kBACA7M,GAEAE,EAAA3D,UAAA+S,WAAA,SAAArU,GACAqB,KAAAgD,MAAAoM,eACA,IAAA1L,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAgD,OAGA,GADAvF,KAAAgD,MAAAiM,gBACAnP,OAAAwR,EAAA3B,UAAAS,WACA,EAAA,CACApQ,KAAAgD,MAAAiM,gBAAAnP,OAAAwR,EAAA3B,UAAAU,OACArQ,KAAAgD,MAAAoM,eAEA,IAAA7H,EAAAvH,KAAAsS,gBAAA3T,GACAqB,KAAAgD,MAAAiM,gBAAAnP,OAAAwR,EAAA3B,UAAAM,WACA1I,EAAAvH,KAAAqT,YAAA1U,EAAA4I,IAEA7D,EAAA7C,SAAA0G,SACAvH,KAAAgD,MAAAiM,gBAAAnP,OAAAwR,EAAA3B,UAAAU,OAGA,OADArQ,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAAS,YACApQ,KAAAsT,oBAAA3U,EAAA+E,IAEAE,EAAA3D,UAAAoT,YAAA,SAAA1U,EAAAgN,GACA3L,KAAAgD,MAAAoM,eACA,IAAA1L,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAkD,QAGA,OAFA/B,EAAA7C,SAAA8K,GACAjI,EAAA7C,SAAAb,KAAAsS,gBAAA3T,IACA+E,GAEAE,EAAA3D,UAAAsT,UAAA,SAAA5U,EAAA6U,GACA,IAAA9P,EAAA1D,KAAA+S,cAAApU,EAAA6U,GAEA,OADA9P,EAAA1D,KAAAyT,mBAAA9U,EAAA+E,IAGAE,EAAA3D,UAAA8S,cAAA,SAAApU,EAAA6U,GACAA,IACAA,EAAAxT,KAAAkT,kBAAAvU,IAEA,IAAAoT,EAAA/R,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAAC,YACAlM,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAApE,MAEA,OADAuF,EAAA7C,SAAA2S,GACAzB,EAAArS,OACA,IAAA,IACA,IAAAgU,EAAA1T,KAAAyR,iBAAA9S,EAAA2S,EAAA3B,UAAA1L,QACAP,EAAA7C,SAAAkD,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA2C,YACAxE,aAAA,QAAAuD,OAAAyP,EAAAhU,QACA,MACA,IAAA,KACAgE,EAAA7C,SAAAkD,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA2C,YACAxE,aAAA,QAAA,QAGA,OAAAgD,GAEAE,EAAA3D,UAAA0T,aAAA,SAAAhV,EAAAgN,GACA,IAAAjI,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAA8D,SACA3C,EAAAhD,aAAA,YAAA,GACAgD,EAAAhD,aAAA,aAAA,GACAiL,GACAjI,EAAA7C,SAAA8K,GAEA3L,KAAAgD,MAAAoM,eACA,IAAA2C,EAAA/R,KAAAgD,MAAAiM,gBACA8C,EAAAjS,OAAAwR,EAAA3B,UAAAkB,cACAnN,EAAAhD,aAAA,YAAA,GACAV,KAAAgD,MAAAoM,iBAEA2C,EAAA/R,KAAAgD,MAAAiM,iBACAnP,OAAAwR,EAAA3B,UAAAC,aACA,MAAAmC,EAAArS,OACAgE,EAAAhD,aAAA,aAAA,GAEAV,KAAAgD,MAAAoM,gBAEA,IAAAoD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAIA,OAHA,EAAAN,OAAAe,KAAA2R,GAAA7Q,QAAAmR,EAAAvL,aACAvD,EAAA7C,SAAAb,KAAA4T,qBAAAjV,IAEA+E,GAEAE,EAAA3D,UAAA4T,cAAA,SAAAlV,EAAAgN,GACA,IAAAjI,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAoE,UACAjD,EAAAhD,aAAA,OAAA,WACAiL,GACAjI,EAAA7C,SAAA8K,GAEA,IAAAoG,EAAA/R,KAAAgD,MAAAiM,gBACA,GAAA8C,EAAAjS,OAAAwR,EAAA3B,UAAAC,WACA,OAAAmC,EAAArS,OACA,IAAA,IAGA,IAAA,KACAgE,EAAAhD,aAAA,OAAA,WACA,MACA,IAAA,KACAgD,EAAAhD,aAAA,OAAA,WACA,MACA,QAAAV,KAAA8R,aAAAnT,EAAA,yBAAAoT,EAAArS,MAAA,uBAAAqS,GAGA/R,KAAAgD,MAAAoM,eACA,IAAAoD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAIA,OAHA,EAAAN,OAAAe,KAAA2R,GAAA7Q,QAAAmR,EAAAvL,aACAvD,EAAA7C,SAAAb,KAAA4T,qBAAAjV,IAEA+E,GAEAE,EAAA3D,UAAA6T,UAAA,SAAAnV,EAAAgN,GACA,IAAAjI,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAgE,MACA7C,EAAAhD,aAAA,OAAA,WACAiL,GACAjI,EAAA7C,SAAA8K,GAEA,IAAAoG,EAAA/R,KAAAgD,MAAAiM,gBACA,GAAA8C,EAAAjS,OAAAwR,EAAA3B,UAAAC,WACA,OAAAmC,EAAArS,OACA,IAAA,IAGA,IAAA,KACAgE,EAAAhD,aAAA,OAAA,WACA,MACA,IAAA,KACAgD,EAAAhD,aAAA,OAAA,UACA,MACA,QAAAV,KAAA8R,aAAAnT,EAAA,qBAAAoT,EAAArS,MAAA,uBAAAqS,GAGA/R,KAAAgD,MAAAoM,eACA,IAAAoD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAIA,OAHA0S,IAAAlB,EAAA3B,UAAA1L,QAAAuO,IAAAlB,EAAA3B,UAAAW,iBACA5M,EAAA7C,SAAAb,KAAAkT,kBAAAvU,IAEA+E,GAEAE,EAAA3D,UAAA8T,UAAA,SAAApV,EAAAgN,GACA,IAAAjI,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAkE,MACA/C,EAAAhD,aAAA,OAAA,UACAiL,GACAjI,EAAA7C,SAAA8K,GAEA,IAAAoG,EAAA/R,KAAAgD,MAAAiM,gBACA,GAAA8C,EAAAjS,OAAAwR,EAAA3B,UAAAC,WACA,OAAAmC,EAAArS,OACA,IAAA,IACAgE,EAAAhD,aAAA,OAAA,UACA,MACA,IAAA,KACAgD,EAAAhD,aAAA,OAAA,WACA,MACA,IAAA,KACAgD,EAAAhD,aAAA,OAAA,UACA,MACA,QAAAV,KAAA8R,aAAAnT,EAAA,qBAAAoT,EAAArS,MAAA,uBAAAqS,GAGA/R,KAAAgD,MAAAoM,eACA,IAAAoD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAIA,OAHA0S,IAAAlB,EAAA3B,UAAA1L,QAAAuO,IAAAlB,EAAA3B,UAAAW,iBACA5M,EAAA7C,SAAAb,KAAAkT,kBAAAvU,IAEA+E,GAEAE,EAAA3D,UAAA+T,YAAA,SAAArV,EAAAgN,GACA,IAAAjI,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAsE,QACAnD,EAAAhD,aAAA,QAAA,GACAiL,GACAjI,EAAA7C,SAAA8K,GAEA,IAAAoG,EAAA/R,KAAAgD,MAAAiM,gBACA,GAAA8C,EAAAjS,OAAAwR,EAAA3B,UAAAC,WACA,OAAAmC,EAAArS,OACA,IAAA,IACAgE,EAAAhD,aAAA,QAAA,GACA,MACA,IAAA,KACAgD,EAAAhD,aAAA,QAAA,GACA,MACA,QAAAV,KAAA8R,aAAAnT,EAAA,qBAAAoT,EAAArS,MAAA,oBAAAqS,GAGA/R,KAAAgD,MAAAoM,eACA,IAAAoD,EAAAxS,KAAAgD,MAAAiM,gBAAAnP,KAIA,OAHA,EAAAN,OAAAe,KAAA2R,GAAA7Q,QAAAmR,EAAAvL,aACAvD,EAAA7C,SAAAb,KAAA4T,qBAAAjV,IAEA+E,GAEAE,EAAA3D,UAAAgU,UAAA,SAAAtV,EAAAgN,GACA,IAAAjI,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAwE,MACArD,EAAAhD,aAAA,YAAA,aACAiL,GACAjI,EAAA7C,SAAA8K,GAEA,IAAAoG,EAAA/R,KAAAgD,MAAAiM,gBACA,GAAA8C,EAAAjS,OAAAwR,EAAA3B,UAAAC,WACA,OAAAmC,EAAArS,OACA,IAAA,IAGA,IAAA,KACAgE,EAAAhD,aAAA,YAAA,aACA,MACA,IAAA,KACAgD,EAAAhD,aAAA,YAAA,cACA,MACA,QAAAV,KAAA8R,aAAAnT,EAAA,qBAAAoT,EAAArS,MAAA,uBAAAqS,GAIA,OADA/R,KAAAgD,MAAAoM,eACA1L,GAEAE,EAAA3D,UAAA2T,qBAAA,SAAAjV,EAAAgN,GACA,IACAjI,EADAqO,EAAA/R,KAAAgD,MAAAiM,gBAgBA,OAdA8C,EAAAjS,OAAAwR,EAAA3B,UAAA1L,OACAP,EAAAK,EAAA3D,QAAAC,OAAA0D,EAAAxB,SAAAoD,QAEA,EAAAnG,OAAAe,KAAA2R,GAAA7Q,QAAA0Q,EAAAjS,KAAAmH,aACAvD,EAAAK,EAAA3D,QAAAC,OAAA6R,EAAAH,EAAAjS,OACAE,KAAAgD,MAAAoM,gBAGApP,KAAA6R,WAAAlT,EAAA2S,EAAA3B,UAAA1L,OAAA8N,GAEApG,GACAjI,EAAA7C,SAAA8K,GAEAjI,EAAA7C,SAAAb,KAAAkT,kBAAAvU,IACA+E,GAEAE,EAAA3D,UAAAwT,mBAAA,SAAA9U,EAAA+E,GACA,OAAA,CACA,IAAAqO,EAAA/R,KAAAgD,MAAAiM,gBACA,IAAA,EAAAzP,OAAAe,KAAA2R,GAAA7Q,QAAA0Q,EAAAjS,KAAAmH,YACAvD,EAAA1D,KAAA4T,qBAAAjV,EAAA+E,QAEA,GAAAqO,EAAAjS,OAAAwR,EAAA3B,UAAAC,WACA,OAAAmC,EAAArS,MAAA,IACA,IAAA,IACAgE,EAAA1D,KAAA6T,cAAAlV,EAAA+E,GACA,MACA,IAAA,IACAA,EAAA1D,KAAA+T,UAAApV,EAAA+E,GACA,MACA,IAAA,IACAA,EAAA1D,KAAA8T,UAAAnV,EAAA+E,GACA,MACA,IAAA,IACAA,EAAA1D,KAAAgU,YAAArV,EAAA+E,GACA,MACA,IAAA,IACAA,EAAA1D,KAAAiU,UAAAtV,EAAA+E,GACA,MACA,QAEA,OADA1D,KAAA6R,WAAAlT,EAAA2S,EAAA3B,UAAAC,WAAAmC,GACArO,MAGA,CAAA,GAAAqO,EAAAjS,OAAAwR,EAAA3B,UAAAkB,YAIA,MAHAnN,EAAA1D,KAAA2T,aAAAhV,EAAA+E,IAMA,OAAAA,GAEAE,EAAA3D,UAAAqT,oBAAA,SAAA3U,EAAA+E,GACA,OAAA,CACA,IAAAqO,EAAA/R,KAAAgD,MAAAiM,gBACA,IAAA,EAAAzP,OAAAe,KAAA2R,GAAA7Q,QAAA0Q,EAAAjS,KAAAmH,YACAvD,EAAA1D,KAAA4T,qBAAAjV,EAAA+E,OAEA,CAAA,GAAAqO,EAAAjS,OAAAwR,EAAA3B,UAAAC,WAiBA,MAhBA,OAAAmC,EAAArS,MAAA,IACA,IAAA,IACAgE,EAAA1D,KAAA+T,UAAApV,EAAA+E,GACA,MACA,IAAA,IACAA,EAAA1D,KAAA8T,UAAAnV,EAAA+E,GACA,MACA,IAAA,IACAA,EAAA1D,KAAAiU,UAAAtV,EAAA+E,GACA,MACA,QAEA,OADA1D,KAAA6R,WAAAlT,EAAA2S,EAAA3B,UAAAC,WAAAmC,GACArO,IAOA,OAAAA,GAEAE,EAnaA,CAoaAoO,EAAAT,aACAzT,EAAA8F,WAAAA,uGCncA,aACApE,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAiK,EACA,SAAA0E,EAAA0D,EAAAmC,GACAlU,KAAAqO,QAAAA,GAIAvQ,EAAA6L,aAAAA,2BCRA,aACAnK,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAA2S,EACA,WACArS,KAAAsI,OAAA,IAIAxK,EAAAuU,YAAAA,2BCRA,aACA7S,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IACA,IAAAyU,EAAA3W,EAAA,aACA4L,EAAA,WACA,SAAAA,IACApJ,KAAAkJ,OAAA,IAAAiL,EAAAA,EAAAC,QAAAC,UAAAC,YAKA,OAHAlL,EAAAnJ,UAAAwN,cAAA,SAAA4D,EAAAkD,GACA,OAAAvU,KAAAkJ,OAAAsL,QAAAnD,EAAAkD,IAEAnL,EAPA,GASAtL,EAAAsL,sBAAAA,yCCZA,aAIA5J,OAAAC,eAAA3B,EAAA,aAAA,CAAA4B,OAAA,IAHA,SAAA2C,GACA,IAAA,IAAAxE,KAAAwE,EAAAvE,EAAAwE,eAAAzE,KAAAC,EAAAD,GAAAwE,EAAAxE,IAGAuE,CAAA5E,EAAA,kGCJA,SAAAkG,GACA,aAEA,IAAA+Q,EAAA,SAEAC,EAAA,mBAAAnM,KAAAmM,OAAA,IAAAnM,KAAAmM,KAAA,WAAA,GACA,SAAAhX,EAAA4P,GACA,IACAqH,EAAA,MAAAjX,EAEAkX,EAAA,MAAAtH,EAGA,OAAAqH,EAAAC,IANAlX,IAAA,GAAA,OAMAkX,EAAAD,GAJArH,IAAA,GAAA,QAIA,KAAA,GAAA,GAEA/E,KAAAmM,KAEAG,EAAA,mBAAAC,OAAA7U,UAAA8U,QAAA,QAAA,IAAAA,OAAA,GACA,SAAAhN,EAAAiN,GACA,OAAAjN,EAAAgN,OAAAC,IACA,SAAAC,EAAAjN,GAEA,IADA,IAAArJ,EAAA,GACA,EAAAqJ,GACA,EAAAA,IACArJ,GAAAsW,GAEAjN,IAAA,EACAiN,GAAAA,EAEA,OAAAtW,GAGA,SAAAwV,EAAAe,GACA,KAAAlV,gBAAAmU,GACA,OAAA,IAAAA,EAAAe,GAGA,GAAA,MAAAA,EACAA,EAAAf,EAAAC,QAAAe,gBACA,GAAA,mBAAAD,EACA,MAAA,IAAAE,UAAA,gDAAAF,GAEAlV,KAAAkV,OAAAA,EAEA,IA2HAG,EACArU,EA5HAsU,EAAAnB,EAAAlU,UAsJA,SAAAsV,EAAA7V,GACA,OAAA,WACA,OAAAA,GA4EA,SAAA8V,EAAAxR,EAAAyR,GACA,OAAA,IAAAA,EACAzR,EAEA,SAAAkR,GACA,OAAAlR,EAAAkR,GAAAO,GA6NA,SAAAC,EAAAhW,GACA,IAAAuT,GAAAvT,EACA,OAAAuT,EAAA,EACA1K,KAAAG,KAAAuK,GAEA1K,KAAAC,MAAAyK,GAIA,SAAA0C,EAAAjW,EAAA1B,GACA,OAAA0B,EAAA,EACA6I,KAAAgM,IAAA7U,EAAA1B,EAAA,GAEAuK,KAAA8I,IAAA3R,EAAA1B,GAiBA,SAAA4X,KAleAzB,EAAAC,QAAA,CACAe,WAAA,WACA,OAAA,WAAA5M,KAAAW,SAAA,GAEAmL,QAAA,SAAAwB,GAEA,SAAAC,EAAAT,GAGA,IAFA,IAAApT,EAAA,EACA8T,EAAA,GAEA,EAAA9T,GAAA,IAAAA,EAAAA,EAAA,EAAA,EACA8T,EAAA,WAAAV,EAAApT,GAAA,WAAAoT,EAAApT,EAAA,EAAA,GACAoT,EAAApT,GAAAoT,EAAApT,EAAA,IAAA,GAAA8T,IAAA,GAAA,EAAAA,EAAA,WAAA,GAGA,MACA,EAAA9T,GAAA,IAAAA,EAAAA,EAAA,EAAA,EACA8T,EAAA,WAAAV,EAAApT,GAAA,WAAAoT,EAAApT,EAAA,EAAA,GACAoT,EAAApT,GAAAoT,EAAApT,EAAA,IAAA,GAAA8T,IAAA,GAAA,EAAAA,EAAA,WAAA,GAGAA,EAAA,WAAAV,EAAA,KAAA,WAAAA,EAAA,GACAA,EAAA,KAAAA,EAAA,KAAAU,IAAA,GAAA,EAAAA,EAAA,WAAA,GAgGA,OAvDA,WACA,IAAAV,EAAA,IAAAQ,EAAA,KACA7U,EAAA,EACAgV,EAAA,EAEA,SAAAC,IACA,MAAA,EAAAjV,KACA8U,EAAAT,GACArU,EAAA,GAGA,IAjDAtB,EAiDAA,EAAA2V,EAAArU,GAGA,OAFAA,EAAAA,EAAA,EAAA,EACAgV,GAAA,EACA,GApDAtW,EAoDAA,EAnDAA,GAAAA,IAAA,GACAA,GAAAA,GAAA,EAAA,YACAA,GAAAA,GAAA,GAAA,YACAA,IAAA,IAsFA,OApCAuW,EAAAC,YAAA,WACA,OAAAF,GAEAC,EAAAE,QAAA,SAAAnO,GAMA,IALAgO,GAAAhO,EACA,MAAA,EAAAhH,KACA8U,EAAAT,GACArU,EAAA,GAEA,IAAAgH,EAAAhH,GACAgH,GAAA,IAAAhH,EACA8U,EAAAT,GACArU,EAAA,EAGA,OADAA,EAAAA,EAAAgH,EAAA,EACAiO,GAEAA,EAAAG,KAAA,SAAAC,GACA,IAAAC,EAAA,EACAjB,EAAA,GAAAiB,EAAA,EAAAD,EAEA,IAAA,IAAAhZ,EAAA,EAAAA,EAAA,IAAAA,EAAAA,EAAA,EAAA,EACAgY,EAAAhY,GAAAiZ,EAAA5B,EAAA4B,EAAAA,IAAA,GAAA,YAAAjZ,EAAA,EAIA,OAFA2D,EAAA,IACAgV,EAAA,EACAC,GAEAA,EAAAM,cAAA,SAAAC,GAGA,OAFAP,EAAAG,KAAA,UA5EA,SAAAf,EAAAmB,GAMA,IALA,IAAAnZ,EAAA,EACAoZ,EAAA,EACAC,EAAAF,EAAAxY,OACAiE,EAAA,EAAAsG,KAAAgM,IAAAmC,EAAA,KACAJ,EAAA,EAAAjB,EAAA,GAEA,GAAA,EAAApT,KAAAA,EACAoT,EAAAhY,GAAAiZ,GAAAjB,EAAAhY,GAAAqX,EAAA4B,EAAAA,IAAA,GAAA,WAAA,EAAAE,EAAAC,KAAA,EAAAA,GAAA,IAEAA,EACA,KAAA,GAFApZ,EAAAA,EAAA,EAAA,MAGAgY,EAAA,GAAAA,EAAA,KACAhY,EAAA,GAEAqZ,GAAAD,IACAA,EAAA,GAGA,IAAAxU,EAAA,IACA,GAAA,EAAAA,KAAAA,EACAoT,EAAAhY,GAAAiZ,GAAAjB,EAAAhY,GAAAqX,EAAA4B,EAAAA,IAAA,GAAA,aAAAjZ,EAAA,EAEA,KAAA,GADAA,EAAAA,EAAA,EAAA,MAEAgY,EAAA,GAAAA,EAAA,KACAhY,EAAA,GAGAgY,EAAA,GAAA,WAiDAkB,CAAAlB,EAAAmB,GACAP,GAEAA,EAAA3B,SAAA,WACA,OAAA2B,EAAAM,cAAApC,EAAAwC,yBAEAV,GA/GA,CAmHA,mBAAAJ,WAAAA,WAAA/H,OACA8I,cAAA,oBAAAC,QAAA,mBAAAA,OAAAC,iBAAA,mBAAAjB,YACAR,EAAA,KACArU,EAAA,IAEA,WASA,OARA,KAAAA,IACA,OAAAqU,IACAA,EAAA,IAAAQ,WAAA,MAEAgB,OAAAC,gBAAAzB,GACArU,EAAA,GAGA,EAAAqU,EAAArU,OAEA,MAGAmT,EAAAwC,qBAAA,WAGA,IAFA,IAAAI,EAAA,GACA7B,EAAAf,EAAAC,QAAAe,WACA9X,EAAA,EAAAA,EAAA,KAAAA,EACA0Z,EAAA1Z,GAAA,EAAA6X,IAGA,OADA6B,EAAA9X,KAAA,GAAA,IAAA+X,MAAAC,WACAF,GAUA5C,EAAA+C,MAAA,SAAAhC,GACA,OAAA,EAAAA,KAEAI,EAAA4B,MAAA,WACA,OAAA/C,EAAA+C,MAAAlX,KAAAkV,SAIAf,EAAAgD,OAAA,SAAAjC,GACA,OAAAA,MAAA,GAEAI,EAAA6B,OAAA,WACA,OAAAhD,EAAAgD,OAAAnX,KAAAkV,SAIAf,EAAAiD,OAAA,SAAAlC,GAGA,OAAA,YAFA,QAAAA,MACAA,MAAA,IAGAI,EAAA8B,OAAA,WACA,OAAAjD,EAAAiD,OAAApX,KAAAkV,SAIAf,EAAAkD,WAAA,SAAAnC,GACA,OAAA,CACA,IAAAoC,EAAA,EAAApC,IACA,KAAA,QAAAoC,GAMA,OAAA,YAAA,QAAAA,IADApC,MAAA,GAJA,GAAA,UAAA,QAAAoC,IAAA,IAAA,EAAApC,KACA,OAAA,mBAQAI,EAAA+B,WAAA,WACA,OAAAlD,EAAAkD,WAAArX,KAAAkV,SAIAf,EAAAoD,MAAA,SAAArC,GACA,IAAAoC,EAAA,EAAApC,IAEA,OAAA,YAAA,QAAAoC,IADApC,MAAA,IACA,QAAAoC,GAAA,iBAAA,IAEAhC,EAAAiC,MAAA,WACA,OAAApD,EAAAoD,MAAAvX,KAAAkV,SAIAf,EAAAqD,UAAA,SAAAtC,GACA,OAAA,CACA,IAAAoC,EAAA,EAAApC,IACA,KAAA,QAAAoC,GAMA,OAAA,YAAA,QAAAA,IADApC,MAAA,IACA,QAAAoC,GAAA,iBAAA,GALA,GAAA,UAAA,QAAAA,IAAA,IAAA,EAAApC,KACA,OAAA,mBAQAI,EAAAkC,UAAA,WACA,OAAArD,EAAAqD,UAAAxX,KAAAkV,SAaAf,EAAAK,QAAA,WACA,SAAAiD,EAAA/X,GACA,OAAA,IAAAA,EAAA,EAAAA,GAqBA,SAAAgY,EAAAC,GACA,OAAAF,EAAAE,IAnBAC,EAoBAD,EAnBA,SAAAzC,GACA,OAAAA,IAAA0C,KAMAC,GADAC,EAeAH,EAfA,GACApP,KAAAC,MAAA,WAAAsP,GACA,SAAA5C,GAEA,IADA,IAAAxV,EAAA,EAEAA,EAAAwV,MAAA,EACA2C,GAAAnY,IACA,OAAAA,EAAAoY,IARA,IACAA,EACAD,EARAD,EAmDA,SAAAG,EAAAJ,GACA,IAtBAC,EAQAE,EACAD,EAaAC,EAAAH,EAAA,EACA,GA1BA,IAAA,EA0BAG,GAAA,CACA,IAAAE,GAAAF,EAAA,WAAA,GAAA,EACA,GAAAL,EAAAO,GACA,OA1BAJ,EA0BAI,EAzBA,SAAA9C,GAGA,OAAA,YAFAA,IAAA0C,IACA1C,MAAA,IA0BA,OApBA2C,GADAC,EAqBAA,GApBAvP,KAAAC,MAAA,iBAAAsP,GACA,SAAA5C,GAEA,IADA,IAAA+C,EAAA,EAIAA,EAAA,YAFA,QAAA/C,MACAA,MAAA,GAEA2C,GAAAI,IACA,OAAAA,EAAAH,GAeA,SAAAI,EAAA7G,EAAAkD,GACA,OAAA,SAAAW,GACA,IAAA+C,EAAA,EACA,EAAA,CACA,IAAAX,EAAA,EAAApC,IAEA+C,EAAA,YAAA,QAAAX,IADApC,MAAA,IACA,QAAAoC,GAAA,iBAAA,SACAW,EAAA5G,GAAAkD,EAAA0D,GACA,OAAAA,GAIA,OAAA,SAAA5G,EAAAkD,GAGA,GAFAlD,EAAA9I,KAAAC,MAAA6I,GACAkD,EAAAhM,KAAAC,MAAA+L,GACAlD,GAAA,mBAAA8G,SAAA9G,GACA,MAAA,IAAA+G,WAAA,iDACA,GAAA,iBAAA7D,IAAA4D,SAAA5D,GACA,MAAA,IAAA6D,WAAA,+CAGA,IAAAT,EAAApD,EAAAlD,EACA,OAAAsG,GAAA,IAAAQ,SAAAR,GACApC,EAAAlE,GACA,aAAAsG,EACA,IAAAtG,EACA8C,EAAAgD,OAEA3B,EAAArB,EAAA+C,MAAA7F,EAAA,YAEAsG,EAAA,WACAnC,EAAAkC,EAAAC,GAAAtG,GACA,mBAAAsG,EACAnC,EAAArB,EAAAiD,OAAA/F,GACAsG,EAAA,iBACAnC,EAAAuC,EAAAJ,GAAAtG,GACAkD,EAAA,EAAAlD,GAAA,iBACAmE,EAAArB,EAAAkD,WAAAhG,IACA,mBAAAA,GAAA,mBAAAkD,EACAJ,EAAAqD,WACA,mBAAAnG,GAAA,mBAAAkD,EACAJ,EAAAoD,OACA,mBAAAlG,GAAA,mBAAAkD,EACAiB,EAAArB,EAAAoD,MAAA,GACA,mBAAAhD,EACAiB,EAAA0C,EAAA7G,EAAA,EAAAkD,EAAA,GAAA,GAEA2D,EAAA7G,EAAAkD,IAlHA,GAsHAe,EAAAd,QAAA,SAAAnD,EAAAkD,GACA,OAAAJ,EAAAK,QAAAnD,EAAAkD,EAAAJ,CAAAnU,KAAAkV,SAIAf,EAAAkE,uBAAA,SAAAnD,GACA,OAAAf,EAAAkD,WAAAnC,GAAA,kBAEAI,EAAA+C,uBAAA,WACA,OAAAlE,EAAAkE,uBAAArY,KAAAkV,SAIAf,EAAAmE,uBAAA,SAAApD,GACA,OAAAf,EAAAiD,OAAAlC,GAAA,kBAEAI,EAAAgD,uBAAA,WACA,OAAAnE,EAAAmE,uBAAAtY,KAAAkV,SAGAf,EAAAoE,KAeA,SAAAC,EAAAC,EAAAC,GACA,IAAAP,SAAAK,GACA,MAAA,IAAAJ,WAAA,uCACA,IAAAD,SAAAM,GACA,MAAA,IAAAL,WAAA,wCAEA,OAAA5C,GApBAxR,EAsBA0U,EAAAvE,EAAAkE,uBAAAlE,EAAAmE,uBArBA,IADAK,EAuBAF,EAAAD,GArBAxU,EACA,IAAA2U,EACA,WACA,OAAA,GAGA,SAAAzD,GACA,OAAAlR,EAAAkR,GAAAyD,IAeAH,GAxBA,IAAAxU,EAAA2U,GA2BArD,EAAAiD,KAAA,SAAAlH,EAAAkD,EAAAmE,GACA,OAAAvE,EAAAoE,KAAAlH,EAAAkD,EAAAmE,EAAAvE,CAAAnU,KAAAkV,SAGAf,EAAAyE,KAAA,WACA,SAAAC,EAAA3D,GACA,OAAA,IAAA,EAAAA,KAGA,SAAA4D,EAAA9U,EAAAtE,GACA,OAAA,SAAAwV,GACA,OAAAlR,EAAAkR,GAAAxV,GAmBA,OAAA,SAAAqZ,EAAAC,GACA,OAAA,MAAAA,EACA,MAAAD,EACAF,EAlBA,SAAAI,GACA,GAAAA,GAAA,EACA,OAAA1D,GAAA,GACA,GAAA,GAAA0D,EACA,OAAA1D,GAAA,GAEA,IAAA2D,EAAA,WAAAD,EACA,OAAAC,EAAA,GAAA,EACAJ,EAAA3E,EAAA+C,MAAAgC,EAAA,WAAA,GAEAJ,EAAA3E,EAAAiD,OAAA7O,KAAAK,MAAA,iBAAAqQ,IAUAE,CAAAJ,GAEAA,GAAA,EACAxD,GAAA,GACAyD,GAAAD,EACAxD,GAAA,GAEAuD,EAAA3E,EAAAK,QAAA,EAAAwE,EAAA,GAAAD,IAtCA,GA0CAzD,EAAAsD,KAAA,SAAAG,EAAAC,GACA,OAAA7E,EAAAyE,KAAAG,EAAAC,EAAA7E,CAAAnU,KAAAkV,SAmBAf,EAAAiF,KAAA,SAAAlE,EAAA6B,EAAAsC,EAAAC,GACA,IAAAtb,EAAA+Y,EAAA/Y,OACAub,EAAA,MAAAF,EAAA,EAAA1D,EAAAD,EAAA2D,GAAArb,GACAwb,OAAA,IAAAF,EAAAtb,EAAA2X,EAAAD,EAAA4D,GAAAtb,GACA,KAAAwb,GAAAD,GAIA,OAAAxC,EADA5C,EAAAK,QAAA+E,EAAAC,EAAA,EACAC,CAAAvE,KAEAI,EAAA8D,KAAA,SAAArC,EAAAsC,EAAAC,GACA,OAAAnF,EAAAiF,KAAApZ,KAAAkV,OAAA6B,EAAAsC,EAAAC,IAMA,IAwIAI,EACAC,EACAC,EAqCAC,EA/KAlY,EAAAmM,MAAA7N,UAAA0B,MACAwS,EAAA2F,OAAA,SAAA/C,EAAAsC,EAAAC,GACA,IAAAS,EAAApY,EAAA5D,KAAAgZ,EAAAsC,EAAAC,GACA,IAAAS,EAAA/b,OACA,OAAA4X,EAEA,IAAA6D,EAAAtF,EAAAK,QAAA,EAAAuF,EAAA/b,OAAA,GACA,OAAA,SAAAkX,GACA,OAAA6E,EAAAN,EAAAvE,MAIAf,EAAA6F,QAAA,SAAA9E,EAAA6B,EAAAkD,GACA,IAAAjc,EAAA+Y,EAAA/Y,OACA,GAAAA,EAAA,CACA,MAAAic,IACAA,EAAA,GAEA,IAAA,IAAA5c,EAAAW,EAAA,IAAA,EAAAic,EAAA5c,IAAAA,EAAA,CACA,IACAoZ,EADAtC,EAAAK,QAAA,EAAAnX,EACAoc,CAAAvE,GACA,GAAA7X,IAAAoZ,EAAA,CACA,IAAAV,EAAAgB,EAAA1Z,GACA0Z,EAAA1Z,GAAA0Z,EAAAN,GACAM,EAAAN,GAAAV,IAIA,OAAAgB,GAEAzB,EAAA0E,QAAA,SAAAjD,GACA,OAAA5C,EAAA6F,QAAAha,KAAAkV,OAAA6B,IAGA5C,EAAA+F,OAAA,SAAAhF,EAAAiF,EAAAC,GACA,GAAAA,EAAA,GAAAA,EAAAD,EAAAnc,SAAAma,SAAAiC,GACA,MAAA,IAAAhC,WAAA,uEAGA,GAAA,IAAAgC,EACA,MAAA,GAGA,IAAAL,EAAApY,EAAA5D,KAAAoc,GACAnc,EAAA+b,EAAA/b,OACA,GAAAA,IAAAoc,EACA,OAAAjG,EAAA6F,QAAA9E,EAAA6E,EAAA,GAEA,IAAAM,EAAArc,EAAAoc,EACA,OAAAjG,EAAA6F,QAAA9E,EAAA6E,EAAAM,EAAA,GAAA1Y,MAAA0Y,IAEA/E,EAAA4E,OAAA,SAAAC,EAAAC,GACA,OAAAjG,EAAA+F,OAAAla,KAAAkV,OAAAiF,EAAAC,IAGAjG,EAAAjI,IAAA,SAAAoO,GACA,OAAAnG,EAAAK,QAAA,EAAA8F,IAEAhF,EAAApJ,IAAA,SAAAoO,GACA,OAAAnG,EAAAjI,IAAAoO,EAAAnG,CAAAnU,KAAAkV,SAGAf,EAAArI,KAAA,SAAAwO,EAAAC,GACA,IAAAd,EAAAtF,EAAAjI,IAAAoO,GACA,OAAA,SAAApF,GACA,IAAAvW,EAAA,GACAA,EAAAX,OAAAuc,EACA,IAAA,IAAAld,EAAA,EAAAA,EAAAkd,IAAAld,EACAsB,EAAAtB,GAAAoc,EAAAvE,GAEA,OAAAvW,IAGA2W,EAAAxJ,KAAA,SAAAwO,EAAAC,GACA,OAAApG,EAAArI,KAAAwO,EAAAC,EAAApG,CAAAnU,KAAAkV,SAIAf,EAAAqG,MAAA,WACA,SAAAC,EAAAC,EAAAC,GACA,OAAA9F,EAAA,IAAA8F,EAAAD,EAAA1c,QAAA0c,EAGA,OAAA,SAAAxF,GACA,IAAAxX,EAAAwX,MAAA,EACA5H,EAAA,EAAA4H,IACA3X,EAAA,EAAA2X,IACAnH,EAAAmH,MAAA,EAEA,OACAuF,EAAA/c,EAAAuJ,SAAA,IAAA,GACA,IACAwT,GAAA,MAAAnN,GAAArG,SAAA,IAAA,GACA,IACAwT,GAAAnN,GAAA,EAAA,KAAA,OAAArG,SAAA,IAAA,GACA,IACAwT,GAAA,MAAAld,EAAA,OAAA0J,SAAA,IAAA,GACA,IACAwT,GAAAld,GAAA,EAAA,OAAA0J,SAAA,IAAA,GACAwT,EAAA1M,EAAA9G,SAAA,IAAA,IArBA,GAwBAqO,EAAAkF,MAAA,WACA,OAAArG,EAAAqG,MAAAxa,KAAAkV,SAGAf,EAAAuG,OAIA,SAAAE,GACA,MAAAA,IACAA,EAJA,oEAOA,IAAA5c,EAAA4c,EAAA5c,OACA,IAAAA,EACA,MAAA,IAAAL,MAAA,2CAGA,IAAA8b,EAAAtF,EAAAK,QAAA,EAAAxW,EAAA,GACA,OAAA,SAAAkX,EAAAlX,GAEA,IADA,IAAAW,EAAA,GACAtB,EAAA,EAAAA,EAAAW,IAAAX,EAAA,CACA,IAAAoZ,EAAAgD,EAAAvE,GACAvW,GAAAic,EAAAC,OAAApE,GAEA,OAAA9X,IAIA2W,EAAAoF,OAAA,SAAA1c,EAAA4c,GACA,OAAAzG,EAAAuG,OAAAE,EAAAzG,CAAAnU,KAAAkV,OAAAlX,IAGAmW,EAAA2G,KAEAnB,EAAAxF,EAAAuG,OADAhB,EAAA,oBAEAE,EAAAzF,EAAAuG,OAAAhB,EAAAqB,eAEA,SAAAC,GACA,OAAAA,EACApB,EAEAD,IAIArE,EAAAwF,IAAA,SAAA9c,EAAAgd,GACA,OAAA7G,EAAA2G,IAAAE,EAAA7G,CAAAnU,KAAAkV,OAAAlX,IAGAmW,EAAA8G,KAAA,SAAA1B,EAAAD,GACA,KAAAC,aAAAvC,MACA,MAAA,IAAA5B,UAAA,2CAAAmE,GACA,KAAAD,aAAAtC,MACA,MAAA,IAAA5B,UAAA,yCAAAkE,GAEA,IAAAG,EAAAtF,EAAAK,QAAA+E,EAAAtC,UAAAqC,EAAArC,WACA,OAAA,SAAA/B,GACA,OAAA,IAAA8B,KAAAyC,EAAAvE,MAGAI,EAAA2F,KAAA,SAAA1B,EAAAD,GACA,OAAAnF,EAAA8G,KAAA1B,EAAAD,EAAAnF,CAAAnU,KAAAkV,SAGA,mBAAAgG,QAAAA,OAAAC,IACAD,OAAA,WACA,OAAA/G,SAEA,IAAAjW,GAAA,mBAAAV,EACAU,EAAAJ,QAAAqW,GAGA0F,EAAAnW,EAAA+Q,GACAN,EAAAiH,WAAA,WAEA,OADA1X,EAAA+Q,GAAAoF,EACA7Z,MAGA0D,EAAA+Q,GAAAN,GAxsBA,CA0sBAnU","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\n\nvar Dice = require(\"dice-typescript\");\n\n// var DiceRoll = require('rolldice');\n\nvar dice = new Dice.Dice();\n\n\nangular.module('roll', ['ngAnimate'])\n.controller('rollController', ['$scope', function($scope) {\n  $scope.roll = \"\";\n  $scope.lastName = \"Doe\";\n\n  $scope.cards = [];\n\n\n  $scope.rollDice = function() {\n\n    var roll = $scope.roll;\n    if (roll == '') {\n      roll = '1d20';\n    }\n\n    // var result = dice.roll(roll);\n\n    var result = new DiceRoll(roll);\n\n    console.log(result.expression);\n    console.log(result.expression.isValid);\n\n    // var rendered = result.renderedExpression.replace('[', \"(\");\n    // rendered = rendered.replace(']', \")\");\n\n    $scope.cards.push({\n      \"total\": result.expression.result,\n      \"rendered\": result.expression.toDetails(),\n      \"roll\": roll\n    });\n\n    console.log('total', result.total);\n\n  };\n\n  $scope.diceBtn = function(roll) {\n    $scope.roll = roll;\n    $scope.rollDice();\n  };\n\n  // roll dice on enter key in main input\n  $scope.rollKeyPress = function(e) {\n    if (e.keyCode == 13) { //return key press\n      $scope.rollDice();\n    }\n  };\n\n}]);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar factory_class_1 = require(\"./factory.class\");\r\nvar node_attributes_class_1 = require(\"./node-attributes.class\");\r\nvar ExpressionNode = /** @class */ (function () {\r\n    function ExpressionNode(type, parent) {\r\n        if (parent === void 0) { parent = null; }\r\n        this.type = type;\r\n        this.parent = parent;\r\n    }\r\n    ExpressionNode.prototype.copy = function () {\r\n        var _this = this;\r\n        var copy = factory_class_1.Factory.create(this.type);\r\n        if (this.attributes) {\r\n            Object.keys(this.attributes).forEach(function (attr) {\r\n                copy.setAttribute(attr, _this.attributes[attr]);\r\n            });\r\n        }\r\n        if (this.children) {\r\n            this.children.forEach(function (child) {\r\n                copy.addChild(child.copy());\r\n            });\r\n        }\r\n        return copy;\r\n    };\r\n    ExpressionNode.prototype.addChild = function (node) {\r\n        return this.insertChild(node);\r\n    };\r\n    ExpressionNode.prototype.insertChild = function (node, index) {\r\n        if (node) {\r\n            if (node === this) {\r\n                throw new Error('Cannot add a node as a child of itself.');\r\n            }\r\n            if (!this.children) {\r\n                this.children = [];\r\n            }\r\n            this.children.splice(index || this.children.length, 0, node);\r\n            node.parent = this;\r\n        }\r\n        return node;\r\n    };\r\n    ExpressionNode.prototype.clearChildren = function () {\r\n        this.children = undefined;\r\n    };\r\n    ExpressionNode.prototype.removeChild = function (expression) {\r\n        if (expression.parent !== this) {\r\n            return null;\r\n        }\r\n        this.children.splice(this.children.indexOf(expression, 1));\r\n        return expression;\r\n    };\r\n    ExpressionNode.prototype.getParent = function () {\r\n        return this.parent;\r\n    };\r\n    ExpressionNode.prototype.getChild = function (index) {\r\n        if (!this.children || this.children.length <= index) {\r\n            throw new Error(\"Child node at index \" + index + \" does not exist.\");\r\n        }\r\n        return this.children[index];\r\n    };\r\n    ExpressionNode.prototype.getChildCount = function () {\r\n        return this.children ? this.children.length : 0;\r\n    };\r\n    ExpressionNode.prototype.forEachChild = function (fn) {\r\n        var children = (this.children || []).slice();\r\n        children.forEach(fn);\r\n    };\r\n    ExpressionNode.prototype.getAttribute = function (key) {\r\n        return this.attributes ? this.attributes[key] : undefined;\r\n    };\r\n    ExpressionNode.prototype.setAttribute = function (key, value) {\r\n        if (!this.attributes) {\r\n            this.attributes = new node_attributes_class_1.NodeAttributes();\r\n        }\r\n        this.attributes[key] = value;\r\n        return this;\r\n    };\r\n    ExpressionNode.prototype.toJSON = function () {\r\n        var _this = this;\r\n        var keys = Object.keys(this).filter(function (k) { return k !== 'parent'; });\r\n        var obj = {};\r\n        keys.forEach(function (k) { return obj[k] = _this[k]; });\r\n        return obj;\r\n    };\r\n    return ExpressionNode;\r\n}());\r\nexports.ExpressionNode = ExpressionNode;\r\n//# sourceMappingURL=expression-node.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar expression_node_class_1 = require(\"./expression-node.class\");\r\nvar Factory = /** @class */ (function () {\r\n    function Factory() {\r\n    }\r\n    Factory.create = function (type) {\r\n        return new expression_node_class_1.ExpressionNode(type);\r\n    };\r\n    return Factory;\r\n}());\r\nexports.Factory = Factory;\r\n//# sourceMappingURL=factory.class.js.map","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./expression-node.class\"));\r\n__export(require(\"./factory.class\"));\r\n__export(require(\"./node-attributes.class\"));\r\n__export(require(\"./node-type.enum\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NodeAttributes = /** @class */ (function () {\r\n    function NodeAttributes() {\r\n    }\r\n    return NodeAttributes;\r\n}());\r\nexports.NodeAttributes = NodeAttributes;\r\n//# sourceMappingURL=node-attributes.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"Function\"] = 'Function'] = \"Function\";\r\n    NodeType[NodeType[\"Group\"] = 'Group'] = \"Group\";\r\n    NodeType[NodeType[\"Repeat\"] = 'Repeat'] = \"Repeat\";\r\n    NodeType[NodeType[\"Add\"] = 'Add'] = \"Add\";\r\n    NodeType[NodeType[\"Subtract\"] = 'Subtract'] = \"Subtract\";\r\n    NodeType[NodeType[\"Negate\"] = 'Negate'] = \"Negate\";\r\n    NodeType[NodeType[\"Exponent\"] = 'Exponent'] = \"Exponent\";\r\n    NodeType[NodeType[\"Multiply\"] = 'Multiply'] = \"Multiply\";\r\n    NodeType[NodeType[\"Divide\"] = 'Divide'] = \"Divide\";\r\n    NodeType[NodeType[\"Modulo\"] = 'Modulo'] = \"Modulo\";\r\n    NodeType[NodeType[\"Equal\"] = 'Equal'] = \"Equal\";\r\n    NodeType[NodeType[\"Greater\"] = 'Greater'] = \"Greater\";\r\n    NodeType[NodeType[\"GreaterOrEqual\"] = 'GreaterOrEqual'] = \"GreaterOrEqual\";\r\n    NodeType[NodeType[\"Less\"] = 'Less'] = \"Less\";\r\n    NodeType[NodeType[\"LessOrEqual\"] = 'LessOrEqual'] = \"LessOrEqual\";\r\n    NodeType[NodeType[\"Explode\"] = 'Explode'] = \"Explode\";\r\n    NodeType[NodeType[\"Keep\"] = 'Keep'] = \"Keep\";\r\n    NodeType[NodeType[\"Drop\"] = 'Drop'] = \"Drop\";\r\n    NodeType[NodeType[\"Critical\"] = 'Critical'] = \"Critical\";\r\n    NodeType[NodeType[\"Reroll\"] = 'Reroll'] = \"Reroll\";\r\n    NodeType[NodeType[\"Sort\"] = 'Sort'] = \"Sort\";\r\n    NodeType[NodeType[\"Dice\"] = 'Dice'] = \"Dice\";\r\n    NodeType[NodeType[\"DiceSides\"] = 'DiceSides'] = \"DiceSides\";\r\n    NodeType[NodeType[\"DiceRoll\"] = 'DiceRoll'] = \"DiceRoll\";\r\n    NodeType[NodeType[\"Number\"] = 'Number'] = \"Number\";\r\n})(NodeType = exports.NodeType || (exports.NodeType = {}));\r\n//# sourceMappingURL=node-type.enum.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar generator_1 = require(\"./generator\");\r\nvar dice_interpreter_class_1 = require(\"./interpreter/dice-interpreter.class\");\r\nvar dice_lexer_class_1 = require(\"./lexer/dice-lexer.class\");\r\nvar dice_parser_class_1 = require(\"./parser/dice-parser.class\");\r\nvar Dice = /** @class */ (function () {\r\n    function Dice(functions, randomProvider, generator) {\r\n        this.functions = functions;\r\n        this.randomProvider = randomProvider;\r\n        this.generator = generator;\r\n    }\r\n    Dice.prototype.roll = function (input) {\r\n        var lexer = this.createLexer(input);\r\n        var parser = this.createParser(lexer);\r\n        var interpreter = this.createInterpreter();\r\n        var generator = this.createGenerator();\r\n        var parseResult = parser.parse();\r\n        return interpreter.interpret(parseResult.root);\r\n    };\r\n    Dice.prototype.createLexer = function (input) {\r\n        return new dice_lexer_class_1.DiceLexer(input);\r\n    };\r\n    Dice.prototype.createParser = function (lexer) {\r\n        return new dice_parser_class_1.DiceParser(lexer);\r\n    };\r\n    Dice.prototype.createInterpreter = function () {\r\n        return new dice_interpreter_class_1.DiceInterpreter(this.functions, this.randomProvider, this.generator);\r\n    };\r\n    Dice.prototype.createGenerator = function () {\r\n        return new generator_1.DiceGenerator();\r\n    };\r\n    return Dice;\r\n}());\r\nexports.Dice = Dice;\r\n//# sourceMappingURL=dice.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Ast = require(\"../ast\");\r\nvar DiceGenerator = /** @class */ (function () {\r\n    function DiceGenerator() {\r\n    }\r\n    DiceGenerator.prototype.generate = function (expression) {\r\n        switch (expression.type) {\r\n            case Ast.NodeType.Number: return this.generateNumber(expression);\r\n            case Ast.NodeType.Add: return this.generateAdd(expression);\r\n            case Ast.NodeType.Subtract: return this.generateSubtract(expression);\r\n            case Ast.NodeType.Multiply: return this.generateMultiply(expression);\r\n            case Ast.NodeType.Divide: return this.generateDivide(expression);\r\n            case Ast.NodeType.Modulo: return this.generateModulo(expression);\r\n            case Ast.NodeType.Exponent: return this.generateExponent(expression);\r\n            case Ast.NodeType.Negate: return this.generateNegate(expression);\r\n            case Ast.NodeType.Dice: return this.generateDice(expression);\r\n            case Ast.NodeType.DiceSides: return this.generateDiceSides(expression);\r\n            case Ast.NodeType.DiceRoll: return this.generateDiceRoll(expression);\r\n            case Ast.NodeType.Function: return this.generateFunction(expression);\r\n            case Ast.NodeType.Group: return this.generateGroup(expression);\r\n            case Ast.NodeType.Repeat: return this.generateRepeat(expression);\r\n            case Ast.NodeType.Equal: return this.generateEqual(expression);\r\n            case Ast.NodeType.Greater: return this.generateGreater(expression);\r\n            case Ast.NodeType.GreaterOrEqual: return this.generateGreaterOrEqual(expression);\r\n            case Ast.NodeType.Less: return this.generateLess(expression);\r\n            case Ast.NodeType.LessOrEqual: return this.generateLessOrEqual(expression);\r\n            case Ast.NodeType.Explode: return this.generateExplode(expression);\r\n            case Ast.NodeType.Keep: return this.generateKeep(expression);\r\n            case Ast.NodeType.Drop: return this.generateDrop(expression);\r\n            case Ast.NodeType.Critical: return this.generateCritical(expression);\r\n            case Ast.NodeType.Reroll: return this.generateReroll(expression);\r\n            case Ast.NodeType.Sort: return this.generateSort(expression);\r\n            default: throw new Error('Unrecognized node type.');\r\n        }\r\n    };\r\n    DiceGenerator.prototype.generateNumber = function (expression) {\r\n        return expression.getAttribute('value').toString();\r\n    };\r\n    DiceGenerator.prototype.generateAdd = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + ' + ' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateSubtract = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + ' - ' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateMultiply = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + ' * ' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateDivide = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + ' / ' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateModulo = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + ' % ' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateExponent = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + ' ^ ' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateNegate = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        return '-' + this.generate(expression.getChild(0));\r\n    };\r\n    DiceGenerator.prototype.generateDice = function (expression) {\r\n        if (expression.getChildCount() === 0 || expression.getChild(0).type === Ast.NodeType.DiceRoll) {\r\n            return '[' + this.generateCommaList(expression) + ']';\r\n        }\r\n        else {\r\n            this.expectChildCount(expression, 2);\r\n            return this.generateWithParens(expression.getChild(0)) + 'd' + this.generateWithParens(expression.getChild(1));\r\n        }\r\n    };\r\n    DiceGenerator.prototype.generateDiceSides = function (expression) {\r\n        var val = expression.getAttribute('value').toString();\r\n        return val === 'fate' ? 'F' : val;\r\n    };\r\n    DiceGenerator.prototype.generateDiceRoll = function (expression) {\r\n        return expression.getAttribute('value').toString();\r\n    };\r\n    DiceGenerator.prototype.generateFunction = function (expression) {\r\n        return expression.getAttribute('name') + '(' + this.generateCommaList(expression) + ')';\r\n    };\r\n    DiceGenerator.prototype.generateGroup = function (expression) {\r\n        return '{' + this.generateCommaList(expression) + '}';\r\n    };\r\n    DiceGenerator.prototype.generateRepeat = function (expression) {\r\n        this.expectChildCount(expression, 2);\r\n        return this.generate(expression.getChild(0)) + '...' + this.generate(expression.getChild(1));\r\n    };\r\n    DiceGenerator.prototype.generateEqual = function (expression) {\r\n        return this.generateEqualityExpression(expression, '=');\r\n    };\r\n    DiceGenerator.prototype.generateGreater = function (expression) {\r\n        return this.generateEqualityExpression(expression, '>');\r\n    };\r\n    DiceGenerator.prototype.generateGreaterOrEqual = function (expression) {\r\n        return this.generateEqualityExpression(expression, '>=');\r\n    };\r\n    DiceGenerator.prototype.generateLess = function (expression) {\r\n        return this.generateEqualityExpression(expression, '<');\r\n    };\r\n    DiceGenerator.prototype.generateLessOrEqual = function (expression) {\r\n        return this.generateEqualityExpression(expression, '<=');\r\n    };\r\n    DiceGenerator.prototype.generateExplode = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        var exp = '!';\r\n        if (expression.getAttribute('compound')) {\r\n            exp += '!';\r\n        }\r\n        if (expression.getAttribute('penetrate')) {\r\n            exp += 'p';\r\n        }\r\n        if (expression.getChildCount() > 1) {\r\n            exp += this.generate(expression.getChild(1));\r\n        }\r\n        return this.generate(expression.getChild(0)) + exp;\r\n    };\r\n    DiceGenerator.prototype.generateKeep = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        var keep = 'k';\r\n        if (expression.getAttribute('type') === 'highest') {\r\n            keep += 'h';\r\n        }\r\n        if (expression.getAttribute('type') === 'lowest') {\r\n            keep += 'l';\r\n        }\r\n        return this.generate(expression.getChild(0)) + keep;\r\n    };\r\n    DiceGenerator.prototype.generateDrop = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        var drop = 'd';\r\n        if (expression.getAttribute('type') === 'highest') {\r\n            drop += 'h';\r\n        }\r\n        if (expression.getAttribute('type') === 'lowest') {\r\n            drop += 'l';\r\n        }\r\n        return this.generate(expression.getChild(0)) + drop;\r\n    };\r\n    DiceGenerator.prototype.generateCritical = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        var critical = 'c';\r\n        if (expression.getAttribute('type') === 'success') {\r\n            critical += 's';\r\n        }\r\n        if (expression.getAttribute('type') === 'failure') {\r\n            critical += 'f';\r\n        }\r\n        if (expression.getChildCount() > 1) {\r\n            critical += this.generate(expression.getChild(1));\r\n        }\r\n        return this.generate(expression.getChild(0)) + critical;\r\n    };\r\n    DiceGenerator.prototype.generateReroll = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        var reroll = 'r';\r\n        if (expression.getAttribute('once')) {\r\n            reroll += 'o';\r\n        }\r\n        if (expression.getChildCount() > 1) {\r\n            reroll += this.generate(expression.getChild(1));\r\n        }\r\n        return this.generate(expression.getChild(0)) + reroll;\r\n    };\r\n    DiceGenerator.prototype.generateSort = function (expression) {\r\n        this.expectChildCount(expression, 1);\r\n        var sort = 's';\r\n        if (expression.getAttribute('direction') === 'ascending') {\r\n            sort += 'a';\r\n        }\r\n        if (expression.getAttribute('direction') === 'descending') {\r\n            sort += 'd';\r\n        }\r\n        return this.generate(expression.getChild(0)) + sort;\r\n    };\r\n    DiceGenerator.prototype.generateEqualityExpression = function (expression, operator) {\r\n        this.expectChildCount(expression, 1);\r\n        if (expression.getChildCount() === 1) {\r\n            return operator + this.generate(expression.getChild(0));\r\n        }\r\n        else {\r\n            return this.generate(expression.getChild(0)) + ' ' + operator + ' ' + this.generate(expression.getChild(1));\r\n        }\r\n    };\r\n    DiceGenerator.prototype.generateCommaList = function (expression) {\r\n        var buffer = '';\r\n        for (var x = 0; x < expression.getChildCount(); x++) {\r\n            if (x > 0) {\r\n                buffer += ', ';\r\n            }\r\n            buffer += this.generate(expression.getChild(x));\r\n        }\r\n        return buffer;\r\n    };\r\n    DiceGenerator.prototype.generateWithParens = function (expression) {\r\n        if (expression.getChildCount() === 0) {\r\n            return this.generate(expression);\r\n        }\r\n        else {\r\n            return '(' + this.generate(expression) + ')';\r\n        }\r\n    };\r\n    DiceGenerator.prototype.expectChildCount = function (expression, count) {\r\n        var findCount = expression.getChildCount();\r\n        if (findCount < count) {\r\n            throw new Error(\"Expected \" + expression.type + \" node to have \" + count + \" children, but found \" + findCount + \".\");\r\n        }\r\n    };\r\n    return DiceGenerator;\r\n}());\r\nexports.DiceGenerator = DiceGenerator;\r\n//# sourceMappingURL=dice-generator.class.js.map","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./dice-generator.class\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./dice.class\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar function_definition_list_class_1 = require(\"./function-definition-list.class\");\r\nexports.DefaultFunctionDefinitions = new function_definition_list_class_1.FunctionDefinitionList();\r\nexports.DefaultFunctionDefinitions['floor'] = function (interpreter, functionNode, errors) {\r\n    return Math.floor(interpreter.evaluate(functionNode.getChild(0), errors));\r\n};\r\nexports.DefaultFunctionDefinitions['ceil'] = function (interpreter, functionNode, errors) {\r\n    return Math.ceil(interpreter.evaluate(functionNode.getChild(0), errors));\r\n};\r\nexports.DefaultFunctionDefinitions['abs'] = function (interpreter, functionNode, errors) {\r\n    return Math.abs(interpreter.evaluate(functionNode.getChild(0), errors));\r\n};\r\nexports.DefaultFunctionDefinitions['round'] = function (interpreter, functionNode, errors) {\r\n    return Math.round(interpreter.evaluate(functionNode.getChild(0), errors));\r\n};\r\nexports.DefaultFunctionDefinitions['sqrt'] = function (interpreter, functionNode, errors) {\r\n    return Math.sqrt(interpreter.evaluate(functionNode.getChild(0), errors));\r\n};\r\n//# sourceMappingURL=default-function-definitions.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Ast = require(\"../ast\");\r\nvar generator_1 = require(\"../generator\");\r\nvar random_1 = require(\"../random\");\r\nvar default_function_definitions_1 = require(\"./default-function-definitions\");\r\nvar dice_result_class_1 = require(\"./dice-result.class\");\r\nvar error_message_class_1 = require(\"./error-message.class\");\r\nvar DiceInterpreter = /** @class */ (function () {\r\n    function DiceInterpreter(functions, random, generator) {\r\n        this.functions = default_function_definitions_1.DefaultFunctionDefinitions;\r\n        Object.assign(this.functions, functions);\r\n        this.random = random || new random_1.DefaultRandomProvider();\r\n        this.generator = generator || new generator_1.DiceGenerator();\r\n    }\r\n    DiceInterpreter.prototype.interpret = function (expression) {\r\n        var exp = expression.copy();\r\n        var errors = [];\r\n        var total = this.evaluate(exp, errors);\r\n        var successes = this.countSuccesses(exp, errors);\r\n        var fails = this.countFailures(exp, errors);\r\n        var renderedExpression = this.generator.generate(exp);\r\n        return new dice_result_class_1.DiceResult(exp, renderedExpression, total, successes, fails, errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluate = function (expression, errors) {\r\n        if (!expression) {\r\n            errors.push(new error_message_class_1.ErrorMessage('Unexpected null node reference found.', expression));\r\n            return 0;\r\n        }\r\n        if (expression.type === Ast.NodeType.DiceRoll) {\r\n            return this.evaluateDiceRoll(expression, errors);\r\n        }\r\n        else if (expression.type === Ast.NodeType.Number) {\r\n            return this.evaluateNumber(expression, errors);\r\n        }\r\n        else if (expression.type === Ast.NodeType.DiceSides) {\r\n            return this.evaluateDiceSides(expression, errors);\r\n        }\r\n        else if (!expression.getAttribute('value')) {\r\n            var value = 0;\r\n            switch (expression.type) {\r\n                case Ast.NodeType.Add:\r\n                    value = this.evaluateAdd(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Subtract:\r\n                    value = this.evaluateSubtract(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Multiply:\r\n                    value = this.evaluateMultiply(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Divide:\r\n                    value = this.evaluateDivide(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Modulo:\r\n                    value = this.evaluateModulo(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Negate:\r\n                    value = this.evaluateNegate(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Exponent:\r\n                    value = this.evaluateExponent(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Dice:\r\n                    value = this.evaluateDice(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Function:\r\n                    value = this.evaluateFunction(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Group:\r\n                    value = this.evaluateGroup(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Repeat:\r\n                    value = this.evaluateRepeat(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Explode:\r\n                    value = this.evaluateExplode(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Keep:\r\n                    value = this.evaluateKeep(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Drop:\r\n                    value = this.evaluateDrop(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Critical:\r\n                    value = this.evaluateCritical(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Reroll:\r\n                    value = this.evaluateReroll(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Sort:\r\n                    value = this.evaluateSort(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Equal:\r\n                    value = this.evaluateEqual(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Greater:\r\n                    value = this.evaluateGreater(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.GreaterOrEqual:\r\n                    value = this.evaluateGreaterOrEqual(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.Less:\r\n                    value = this.evaluateLess(expression, errors);\r\n                    break;\r\n                case Ast.NodeType.LessOrEqual:\r\n                    value = this.evaluateLessOrEqual(expression, errors);\r\n                    break;\r\n                default:\r\n                    errors.push(new error_message_class_1.ErrorMessage(\"Unrecognized node type '\" + expression.type + \"'.\", expression));\r\n                    return 0;\r\n            }\r\n            expression.setAttribute('value', value);\r\n        }\r\n        return expression.getAttribute('value');\r\n    };\r\n    DiceInterpreter.prototype.evaluateAdd = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        return this.evaluate(expression.getChild(0), errors) + this.evaluate(expression.getChild(1), errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateSubtract = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        return this.evaluate(expression.getChild(0), errors) - this.evaluate(expression.getChild(1), errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateMultiply = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        return this.evaluate(expression.getChild(0), errors) * this.evaluate(expression.getChild(1), errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateDivide = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        return this.evaluate(expression.getChild(0), errors) / this.evaluate(expression.getChild(1), errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateModulo = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        return this.evaluate(expression.getChild(0), errors) % this.evaluate(expression.getChild(1), errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateExponent = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        return Math.pow(this.evaluate(expression.getChild(0), errors), this.evaluate(expression.getChild(1), errors));\r\n    };\r\n    DiceInterpreter.prototype.evaluateNegate = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        return -this.evaluate(expression.getChild(0), errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateNumber = function (expression, errors) {\r\n        return expression.getAttribute('value');\r\n    };\r\n    DiceInterpreter.prototype.evaluateDiceSides = function (expression, errors) {\r\n        return expression.getAttribute('value');\r\n    };\r\n    DiceInterpreter.prototype.evaluateDiceRoll = function (expression, errors) {\r\n        if (expression.getAttribute('drop') !== true) {\r\n            return expression.getAttribute('value');\r\n        }\r\n        return 0;\r\n    };\r\n    DiceInterpreter.prototype.evaluateDice = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        var num = Math.round(this.evaluate(expression.getChild(0), errors));\r\n        var sides = expression.getChild(1);\r\n        expression.setAttribute('sides', this.evaluate(sides, errors));\r\n        expression.clearChildren();\r\n        var total = 0;\r\n        for (var x = 0; x < num; x++) {\r\n            var diceRoll = this.createDiceRoll(sides, errors);\r\n            expression.addChild(diceRoll);\r\n            total += this.evaluate(diceRoll, errors);\r\n        }\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateFunction = function (expression, errors) {\r\n        var fName = expression.getAttribute('name');\r\n        if (Object.keys(this.functions).indexOf(fName) === -1) {\r\n            errors.push(new error_message_class_1.ErrorMessage(\"Unknown function: \" + fName, expression));\r\n        }\r\n        var result = this.functions[fName](this, expression, errors);\r\n        return result;\r\n    };\r\n    DiceInterpreter.prototype.evaluateGroup = function (expression, errors) {\r\n        var _this = this;\r\n        var total = 0;\r\n        expression.forEachChild(function (child) {\r\n            total += _this.evaluate(child, errors);\r\n        });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateRepeat = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        var lhs = expression.getChild(0);\r\n        var times = this.evaluate(expression.getChild(1), errors);\r\n        var parent = expression.getParent();\r\n        parent.removeChild(expression);\r\n        var total = 0;\r\n        for (var x = 0; x < times; x++) {\r\n            var copy = lhs.copy();\r\n            parent.addChild(copy);\r\n            total += this.evaluate(copy, errors);\r\n        }\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateExplode = function (expression, errors) {\r\n        var _this = this;\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        var dice = this.findDiceOrGroupNode(expression, errors);\r\n        if (!dice) {\r\n            return 0;\r\n        }\r\n        var condition;\r\n        var penetrate = expression.getAttribute('penetrate');\r\n        if (expression.getChildCount() > 1) {\r\n            condition = expression.getChild(1);\r\n        }\r\n        this.evaluate(dice, errors);\r\n        var newRolls = [];\r\n        var total = 0;\r\n        var sides = dice.getAttribute('sides');\r\n        dice.forEachChild(function (die) {\r\n            if (!die.getAttribute('drop')) {\r\n                var dieValue = _this.evaluate(die, errors);\r\n                total += dieValue;\r\n                while (condition && _this.evaluateComparison(dieValue, condition, errors) || dieValue === sides) {\r\n                    die = _this.createDiceRoll(sides, errors);\r\n                    dieValue = _this.evaluate(die, errors);\r\n                    if (penetrate) {\r\n                        dieValue -= 1;\r\n                    }\r\n                    total += dieValue;\r\n                    newRolls.push(die);\r\n                }\r\n            }\r\n        });\r\n        newRolls.forEach(function (newRoll) { return dice.addChild(newRoll); });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateKeep = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        var dice = this.findDiceOrGroupNode(expression, errors);\r\n        if (!dice) {\r\n            return 0;\r\n        }\r\n        var countTotal = (expression.getChildCount() > 1) ? this.evaluate(expression.getChild(1), errors) : 1;\r\n        var type = expression.getAttribute('type');\r\n        this.evaluate(dice, errors);\r\n        var rolls = this.getSortedDiceRolls(dice, (type === 'lowest') ? 'ascending' : 'descending', errors).rolls;\r\n        var count = 0;\r\n        var total = 0;\r\n        rolls.forEach(function (roll) {\r\n            if (count < countTotal) {\r\n                roll.setAttribute('drop', false);\r\n                total += roll.getAttribute('value');\r\n            }\r\n            else {\r\n                roll.setAttribute('drop', true);\r\n            }\r\n            count++;\r\n        });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateDrop = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        var dice = this.findDiceOrGroupNode(expression, errors);\r\n        if (!dice) {\r\n            return 0;\r\n        }\r\n        var countTotal = (expression.getChildCount() > 1) ? this.evaluate(expression.getChild(1), errors) : 1;\r\n        var type = expression.getAttribute('type');\r\n        this.evaluate(dice, errors);\r\n        var rolls = this.getSortedDiceRolls(dice, (type === 'lowest') ? 'ascending' : 'descending', errors).rolls;\r\n        var count = 0;\r\n        var total = 0;\r\n        rolls.forEach(function (roll) {\r\n            if (count < countTotal) {\r\n                roll.setAttribute('drop', true);\r\n            }\r\n            else {\r\n                roll.setAttribute('drop', false);\r\n                total += roll.getAttribute('value');\r\n            }\r\n            count++;\r\n        });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateCritical = function (expression, errors) {\r\n        var _this = this;\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        var dice = this.findDiceOrGroupNode(expression, errors);\r\n        if (!dice) {\r\n            return 0;\r\n        }\r\n        var type = expression.getAttribute('type');\r\n        var condition;\r\n        if (expression.getChildCount() > 1) {\r\n            condition = expression.getChild(1);\r\n        }\r\n        else {\r\n            condition = Ast.Factory.create(Ast.NodeType.Equal);\r\n            if (type === 'success') {\r\n                this.expectChildCount(dice, 2, errors);\r\n                condition.addChild(Ast.Factory.create(Ast.NodeType.Number).setAttribute('value', dice.getAttribute('sides')));\r\n            }\r\n            else {\r\n                condition.addChild(Ast.Factory.create(Ast.NodeType.Number).setAttribute('value', 1));\r\n            }\r\n        }\r\n        this.evaluate(dice, errors);\r\n        var total = 0;\r\n        dice.forEachChild(function (die) {\r\n            var dieValue = _this.evaluate(die, errors);\r\n            if (_this.evaluateComparison(dieValue, condition, errors)) {\r\n                die.setAttribute('critical', type);\r\n                total += dieValue;\r\n            }\r\n        });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateReroll = function (expression, errors) {\r\n        var _this = this;\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        var dice = this.findDiceOrGroupNode(expression, errors);\r\n        if (!dice) {\r\n            return 0;\r\n        }\r\n        var condition;\r\n        var once = expression.getAttribute('once');\r\n        if (expression.getChildCount() > 1) {\r\n            condition = expression.getChild(1);\r\n        }\r\n        this.evaluate(dice, errors);\r\n        var total = 0;\r\n        var sides = dice.getAttribute('sides');\r\n        dice.forEachChild(function (die) {\r\n            if (!die.getAttribute('drop')) {\r\n                var dieValue = _this.evaluate(die, errors);\r\n                while (condition && _this.evaluateComparison(dieValue, condition, errors) || dieValue === 1) {\r\n                    dieValue = _this.createDiceRollValue(sides, errors);\r\n                    if (once) {\r\n                        break;\r\n                    }\r\n                }\r\n                die.setAttribute('value', dieValue);\r\n                total += dieValue;\r\n            }\r\n        });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateSort = function (expression, errors) {\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return 0;\r\n        }\r\n        var dice = this.findDiceOrGroupNode(expression, errors);\r\n        if (!dice) {\r\n            return 0;\r\n        }\r\n        var rolls = this.getSortedDiceRolls(dice, expression.getAttribute('direction'), errors);\r\n        dice.clearChildren();\r\n        rolls.rolls.forEach(function (roll) { return dice.addChild(roll); });\r\n        return rolls.total;\r\n    };\r\n    DiceInterpreter.prototype.evaluateEqual = function (expression, errors) {\r\n        return this.evaluateSuccess(expression, function (l, r) { return (l === r); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateGreater = function (expression, errors) {\r\n        return this.evaluateSuccess(expression, function (l, r) { return (l > r); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateGreaterOrEqual = function (expression, errors) {\r\n        return this.evaluateSuccess(expression, function (l, r) { return (l >= r); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateLess = function (expression, errors) {\r\n        return this.evaluateSuccess(expression, function (l, r) { return (l < r); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.evaluateLessOrEqual = function (expression, errors) {\r\n        return this.evaluateSuccess(expression, function (l, r) { return (l <= r); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.countSuccesses = function (expression, errors) {\r\n        return this.countSuccessOrFailure(expression, function (die) { return die.getAttribute('success'); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.countFailures = function (expression, errors) {\r\n        return this.countSuccessOrFailure(expression, function (die) { return !die.getAttribute('success'); }, errors);\r\n    };\r\n    DiceInterpreter.prototype.countSuccessOrFailure = function (expression, condition, errors) {\r\n        var _this = this;\r\n        var total = 0;\r\n        if (expression.type === Ast.NodeType.Dice || expression.type === Ast.NodeType.Group) {\r\n            expression.forEachChild(function (die) {\r\n                if (!die.getAttribute('drop') && condition(die)) {\r\n                    total++;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            expression.forEachChild(function (die) {\r\n                total += _this.countSuccessOrFailure(die, condition, errors);\r\n            });\r\n        }\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.expectChildCount = function (expression, count, errors) {\r\n        var findCount = expression.getChildCount();\r\n        if (findCount < count) {\r\n            var err = new error_message_class_1.ErrorMessage(\"Expected \" + expression.type + \" node to have \" + count + \" children, but found \" + findCount + \".\", expression);\r\n            errors.push(err);\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    DiceInterpreter.prototype.evaluateComparison = function (lhs, expression, errors) {\r\n        if (!this.expectChildCount(expression, 1, errors)) {\r\n            return false;\r\n        }\r\n        switch (expression.type) {\r\n            case Ast.NodeType.Equal: return lhs === this.evaluate(expression.getChild(0), errors);\r\n            case Ast.NodeType.Greater: return lhs > this.evaluate(expression.getChild(0), errors);\r\n            case Ast.NodeType.GreaterOrEqual: return lhs >= this.evaluate(expression.getChild(0), errors);\r\n            case Ast.NodeType.Less: return lhs < this.evaluate(expression.getChild(0), errors);\r\n            case Ast.NodeType.LessOrEqual: return lhs <= this.evaluate(expression.getChild(0), errors);\r\n            default:\r\n                errors.push(new error_message_class_1.ErrorMessage(\"Unrecognized comparison operator '\" + expression.type + \"'.\", expression));\r\n                return false;\r\n        }\r\n    };\r\n    DiceInterpreter.prototype.evaluateSuccess = function (expression, compare, errors) {\r\n        var _this = this;\r\n        if (!this.expectChildCount(expression, 2, errors)) {\r\n            return 0;\r\n        }\r\n        var rhv = this.evaluate(expression.getChild(1), errors);\r\n        var total = 0;\r\n        var diceOrGroup = this.findDiceOrGroupNode(expression, errors);\r\n        if (!diceOrGroup) {\r\n            return 0;\r\n        }\r\n        diceOrGroup.forEachChild(function (die) {\r\n            if (!die.getAttribute('drop')) {\r\n                var val = _this.evaluate(die, errors);\r\n                var res = compare(_this.evaluate(die, errors), rhv);\r\n                die.setAttribute('success', res);\r\n                if (res) {\r\n                    total += val;\r\n                }\r\n            }\r\n        });\r\n        return total;\r\n    };\r\n    DiceInterpreter.prototype.findDiceOrGroupNode = function (expression, errors) {\r\n        if (expression.type === Ast.NodeType.Dice || expression.type === Ast.NodeType.Group) {\r\n            return expression;\r\n        }\r\n        if (expression.getChildCount() < 1) {\r\n            errors.push(new error_message_class_1.ErrorMessage('Missing dice/group node.', expression));\r\n            return null;\r\n        }\r\n        var child = expression.getChild(0);\r\n        this.evaluate(child, errors);\r\n        return this.findDiceOrGroupNode(child, errors);\r\n    };\r\n    DiceInterpreter.prototype.getSortedDiceRolls = function (dice, direction, errors) {\r\n        var _this = this;\r\n        var output = { rolls: [], total: 0 };\r\n        dice.forEachChild(function (die) {\r\n            output.rolls.push(die);\r\n            output.total += _this.evaluate(die, errors);\r\n        });\r\n        var sortOrder;\r\n        if (direction === 'descending') {\r\n            sortOrder = function (a, b) { return b.getAttribute('value') - a.getAttribute('value'); };\r\n        }\r\n        else if (direction === 'ascending') {\r\n            sortOrder = function (a, b) { return a.getAttribute('value') - b.getAttribute('value'); };\r\n        }\r\n        else {\r\n            errors.push(new error_message_class_1.ErrorMessage(\"Unknown sort direction: \" + direction + \". Expected 'ascending' or 'descending'.\", dice));\r\n        }\r\n        output.rolls = output.rolls.sort(sortOrder);\r\n        return output;\r\n    };\r\n    DiceInterpreter.prototype.createDiceRoll = function (sides, errors) {\r\n        var sidesValue = sides instanceof Ast.ExpressionNode\r\n            ? sides.getAttribute('value')\r\n            : sides;\r\n        var diceRoll = this.createDiceRollValue(sides, errors);\r\n        return Ast.Factory.create(Ast.NodeType.DiceRoll)\r\n            .setAttribute('value', diceRoll)\r\n            .setAttribute('drop', false);\r\n    };\r\n    DiceInterpreter.prototype.createDiceRollValue = function (sides, errors) {\r\n        var minValue = 1, maxValue = 0;\r\n        var sidesValue = sides instanceof Ast.ExpressionNode\r\n            ? sides.getAttribute('value')\r\n            : sides;\r\n        if (sidesValue === 'fate') {\r\n            minValue = -1;\r\n            maxValue = 1;\r\n        }\r\n        else {\r\n            maxValue = Math.round(sides instanceof Ast.ExpressionNode ? this.evaluate(sides, errors) : sides);\r\n        }\r\n        return this.random.numberBetween(minValue, maxValue);\r\n    };\r\n    return DiceInterpreter;\r\n}());\r\nexports.DiceInterpreter = DiceInterpreter;\r\n//# sourceMappingURL=dice-interpreter.class.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar result_class_1 = require(\"./result.class\");\r\nvar DiceResult = /** @class */ (function (_super) {\r\n    __extends(DiceResult, _super);\r\n    function DiceResult(expression, renderedExpression, total, successes, failures, errors) {\r\n        var _this = _super.call(this, expression, renderedExpression, total) || this;\r\n        _this.successes = successes;\r\n        _this.failures = failures;\r\n        _this.errors = errors;\r\n        return _this;\r\n    }\r\n    return DiceResult;\r\n}(result_class_1.Result));\r\nexports.DiceResult = DiceResult;\r\n//# sourceMappingURL=dice-result.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ErrorMessage = /** @class */ (function () {\r\n    function ErrorMessage(message, expression, stack) {\r\n        if (stack === void 0) { stack = (new Error().stack); }\r\n        this.message = message;\r\n    }\r\n    return ErrorMessage;\r\n}());\r\nexports.ErrorMessage = ErrorMessage;\r\n//# sourceMappingURL=error-message.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar FunctionDefinitionList = /** @class */ (function () {\r\n    function FunctionDefinitionList() {\r\n    }\r\n    return FunctionDefinitionList;\r\n}());\r\nexports.FunctionDefinitionList = FunctionDefinitionList;\r\n//# sourceMappingURL=function-definition-list.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result = /** @class */ (function () {\r\n    function Result(reducedExpression, renderedExpression, total) {\r\n        this.reducedExpression = reducedExpression;\r\n        this.renderedExpression = renderedExpression;\r\n        this.total = total;\r\n    }\r\n    return Result;\r\n}());\r\nexports.Result = Result;\r\n//# sourceMappingURL=result.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar string_character_stream_class_1 = require(\"./string-character-stream.class\");\r\nvar token_class_1 = require(\"./token.class\");\r\nvar token_type_enum_1 = require(\"./token-type.enum\");\r\nvar DiceLexer = /** @class */ (function () {\r\n    function DiceLexer(input) {\r\n        this.numCharRegex = /[0-9]/;\r\n        this.idCharRegex = /[a-zA-Z]/;\r\n        if (this.isCharacterStream(input)) {\r\n            this.stream = input;\r\n        }\r\n        else if (typeof input === 'string') {\r\n            this.stream = new string_character_stream_class_1.StringCharacterStream(input);\r\n        }\r\n        else {\r\n            throw new Error('Unrecognized input type. input must be of type \\'CharacterStream | string\\'.');\r\n        }\r\n    }\r\n    DiceLexer.prototype.isCharacterStream = function (input) {\r\n        return input.getCurrentCharacter;\r\n    };\r\n    DiceLexer.prototype.peekNextToken = function () {\r\n        if (!this.nextToken) {\r\n            this.nextToken = this.constructNextToken();\r\n        }\r\n        return this.nextToken;\r\n    };\r\n    DiceLexer.prototype.getNextToken = function () {\r\n        if (this.nextToken) {\r\n            this.currentToken = this.nextToken;\r\n            this.nextToken = null;\r\n        }\r\n        else {\r\n            this.currentToken = this.constructNextToken();\r\n        }\r\n        return this.currentToken;\r\n    };\r\n    DiceLexer.prototype.parseIdentifier = function () {\r\n        var buffer = this.stream.getCurrentCharacter();\r\n        while (this.idCharRegex.test(this.stream.peekNextCharacter())) {\r\n            buffer += this.stream.getNextCharacter();\r\n        }\r\n        return this.createToken(token_type_enum_1.TokenType.Identifier, buffer);\r\n    };\r\n    DiceLexer.prototype.parseNumber = function () {\r\n        var buffer = this.stream.getCurrentCharacter();\r\n        var hasDot = false;\r\n        var nextChar = this.stream.peekNextCharacter();\r\n        while (nextChar === '.' || this.numCharRegex.test(nextChar)) {\r\n            if (nextChar === '.') {\r\n                if (hasDot) {\r\n                    break;\r\n                }\r\n                hasDot = true;\r\n            }\r\n            buffer += this.stream.getNextCharacter();\r\n            nextChar = this.stream.peekNextCharacter();\r\n        }\r\n        return this.createToken(token_type_enum_1.TokenType.Number, buffer);\r\n    };\r\n    DiceLexer.prototype.parseEllipsis = function () {\r\n        for (var x = 0; x < 2; x++) {\r\n            if (this.stream.peekNextCharacter() !== '.') {\r\n                throw new Error('Missing period in ellipsis.');\r\n            }\r\n            this.stream.getNextCharacter();\r\n        }\r\n        return this.createToken(token_type_enum_1.TokenType.Ellipsis, '...');\r\n    };\r\n    DiceLexer.prototype.constructNextToken = function () {\r\n        var curChar;\r\n        while (curChar = this.stream.getNextCharacter()) {\r\n            switch (true) {\r\n                case this.idCharRegex.test(curChar): return this.parseIdentifier();\r\n                case this.numCharRegex.test(curChar): return this.parseNumber();\r\n                case curChar === '{': return this.createToken(token_type_enum_1.TokenType.BraceOpen, curChar);\r\n                case curChar === '}': return this.createToken(token_type_enum_1.TokenType.BraceClose, curChar);\r\n                case curChar === ',': return this.createToken(token_type_enum_1.TokenType.Comma, curChar);\r\n                case curChar === '(': return this.createToken(token_type_enum_1.TokenType.ParenthesisOpen, curChar);\r\n                case curChar === ')': return this.createToken(token_type_enum_1.TokenType.ParenthesisClose, curChar);\r\n                case curChar === '=': return this.createToken(token_type_enum_1.TokenType.Equals, curChar);\r\n                case curChar === '+': return this.createToken(token_type_enum_1.TokenType.Plus, curChar);\r\n                case curChar === '/': return this.createToken(token_type_enum_1.TokenType.Slash, curChar);\r\n                case curChar === '-': return this.createToken(token_type_enum_1.TokenType.Minus, curChar);\r\n                case curChar === '%': return this.createToken(token_type_enum_1.TokenType.Percent, curChar);\r\n                case curChar === '!': return this.createToken(token_type_enum_1.TokenType.Exclamation, curChar);\r\n                case curChar === '.': return this.parseEllipsis();\r\n                case curChar === '*':\r\n                    if (this.stream.peekNextCharacter() === '*') {\r\n                        this.stream.getNextCharacter();\r\n                        return this.createToken(token_type_enum_1.TokenType.DoubleAsterisk, curChar + this.stream.getCurrentCharacter());\r\n                    }\r\n                    else {\r\n                        return this.createToken(token_type_enum_1.TokenType.Asterisk, curChar);\r\n                    }\r\n                case curChar === '>':\r\n                    if (this.stream.peekNextCharacter() === '=') {\r\n                        this.stream.getNextCharacter();\r\n                        return this.createToken(token_type_enum_1.TokenType.GreaterOrEqual, curChar + this.stream.getCurrentCharacter());\r\n                    }\r\n                    else {\r\n                        return this.createToken(token_type_enum_1.TokenType.Greater, curChar);\r\n                    }\r\n                case curChar === '<':\r\n                    if (this.stream.peekNextCharacter() === '=') {\r\n                        this.stream.getNextCharacter();\r\n                        return this.createToken(token_type_enum_1.TokenType.LessOrEqual, curChar + this.stream.getCurrentCharacter());\r\n                    }\r\n                    else {\r\n                        return this.createToken(token_type_enum_1.TokenType.Less, curChar);\r\n                    }\r\n                case /\\W/.test(curChar):\r\n                    // Ignore whitespace.\r\n                    break;\r\n                default: throw new Error(\"Unknown token: '\" + curChar + \"'.\");\r\n            }\r\n        }\r\n        // Terminator at end of stream.\r\n        return this.createToken(token_type_enum_1.TokenType.Terminator);\r\n    };\r\n    DiceLexer.prototype.createToken = function (type, value) {\r\n        var position = this.stream.getCurrentPosition();\r\n        if (value) {\r\n            position -= value.length - 1;\r\n        }\r\n        return new token_class_1.Token(type, position, value);\r\n    };\r\n    return DiceLexer;\r\n}());\r\nexports.DiceLexer = DiceLexer;\r\n//# sourceMappingURL=dice-lexer.class.js.map","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./string-character-stream.class\"));\r\n__export(require(\"./dice-lexer.class\"));\r\n__export(require(\"./non-global-definition-error.class\"));\r\n__export(require(\"./token-type.enum\"));\r\n__export(require(\"./token.class\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NonGlobalDefinitionError = /** @class */ (function (_super) {\r\n    __extends(NonGlobalDefinitionError, _super);\r\n    function NonGlobalDefinitionError() {\r\n        return _super.call(this, 'TokenDefinition pattern RegExp must be global.') || this;\r\n    }\r\n    return NonGlobalDefinitionError;\r\n}(Error));\r\nexports.NonGlobalDefinitionError = NonGlobalDefinitionError;\r\n//# sourceMappingURL=non-global-definition-error.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringCharacterStream = /** @class */ (function () {\r\n    function StringCharacterStream(input) {\r\n        this.input = input;\r\n        this.index = -1;\r\n    }\r\n    StringCharacterStream.prototype.getCurrentPosition = function () {\r\n        return this.index;\r\n    };\r\n    StringCharacterStream.prototype.getNextCharacter = function () {\r\n        this.index = Math.min(this.index + 1, this.input.length);\r\n        if (this.index >= this.input.length) {\r\n            return null;\r\n        }\r\n        return this.input[this.index];\r\n    };\r\n    StringCharacterStream.prototype.getCurrentCharacter = function () {\r\n        if (this.index < 0 || this.index >= this.input.length) {\r\n            return null;\r\n        }\r\n        return this.input[this.index];\r\n    };\r\n    StringCharacterStream.prototype.peekNextCharacter = function () {\r\n        if (this.index >= this.input.length) {\r\n            return null;\r\n        }\r\n        return this.input[this.index + 1];\r\n    };\r\n    return StringCharacterStream;\r\n}());\r\nexports.StringCharacterStream = StringCharacterStream;\r\n//# sourceMappingURL=string-character-stream.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"Equals\"] = '='] = \"Equals\";\r\n    TokenType[TokenType[\"Greater\"] = '>'] = \"Greater\";\r\n    TokenType[TokenType[\"GreaterOrEqual\"] = '>='] = \"GreaterOrEqual\";\r\n    TokenType[TokenType[\"Less\"] = '<'] = \"Less\";\r\n    TokenType[TokenType[\"LessOrEqual\"] = '<='] = \"LessOrEqual\";\r\n    TokenType[TokenType[\"BraceClose\"] = '}'] = \"BraceClose\";\r\n    TokenType[TokenType[\"BraceOpen\"] = '{'] = \"BraceOpen\";\r\n    TokenType[TokenType[\"Comma\"] = ','] = \"Comma\";\r\n    TokenType[TokenType[\"Ellipsis\"] = '...'] = \"Ellipsis\";\r\n    TokenType[TokenType[\"Identifier\"] = 'identifier'] = \"Identifier\";\r\n    TokenType[TokenType[\"Plus\"] = '+'] = \"Plus\";\r\n    TokenType[TokenType[\"Slash\"] = '/'] = \"Slash\";\r\n    TokenType[TokenType[\"DoubleAsterisk\"] = '**'] = \"DoubleAsterisk\";\r\n    TokenType[TokenType[\"Percent\"] = '%'] = \"Percent\";\r\n    TokenType[TokenType[\"Asterisk\"] = '*'] = \"Asterisk\";\r\n    TokenType[TokenType[\"Minus\"] = '-'] = \"Minus\";\r\n    TokenType[TokenType[\"Number\"] = 'number'] = \"Number\";\r\n    TokenType[TokenType[\"ParenthesisClose\"] = ')'] = \"ParenthesisClose\";\r\n    TokenType[TokenType[\"ParenthesisOpen\"] = '('] = \"ParenthesisOpen\";\r\n    TokenType[TokenType[\"Terminator\"] = 'terminator'] = \"Terminator\";\r\n    TokenType[TokenType[\"Exclamation\"] = '!'] = \"Exclamation\";\r\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\r\n//# sourceMappingURL=token-type.enum.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Token = /** @class */ (function () {\r\n    function Token(type, position, value) {\r\n        this.type = type;\r\n        this.position = position;\r\n        this.value = value;\r\n    }\r\n    return Token;\r\n}());\r\nexports.Token = Token;\r\n//# sourceMappingURL=token.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lexer_1 = require(\"../lexer\");\r\nvar error_message_class_1 = require(\"./error-message.class\");\r\nvar BasicParser = /** @class */ (function () {\r\n    function BasicParser(input) {\r\n        if (this.isLexer(input)) {\r\n            this.lexer = input;\r\n        }\r\n        else if (typeof input === 'string') {\r\n            this.lexer = new lexer_1.DiceLexer(input);\r\n        }\r\n        else {\r\n            throw new Error('Unrecognized input type. input must be of type \\'Lexer | string\\'.');\r\n        }\r\n    }\r\n    BasicParser.prototype.isLexer = function (input) {\r\n        return input.getNextToken;\r\n    };\r\n    BasicParser.prototype.expectAndConsume = function (result, expected, actual) {\r\n        this.expect(result, expected, actual);\r\n        return this.lexer.getNextToken();\r\n    };\r\n    BasicParser.prototype.expect = function (result, expected, actual) {\r\n        actual = actual || this.lexer.peekNextToken();\r\n        if (actual.type !== expected) {\r\n            this.errorToken(result, expected, actual);\r\n        }\r\n        return actual;\r\n    };\r\n    BasicParser.prototype.errorToken = function (result, expected, actual) {\r\n        var message = \"Error at position \" + actual.position + \".\";\r\n        message += \" Expected token of type \" + expected + \", found token of type \" + actual.type + \" of value \\\"\" + actual.value + \"\\\".\";\r\n        this.errorMessage(result, message, actual);\r\n    };\r\n    BasicParser.prototype.errorMessage = function (result, message, token) {\r\n        result.errors.push(new error_message_class_1.ErrorMessage(message, token, new Error().stack));\r\n    };\r\n    return BasicParser;\r\n}());\r\nexports.BasicParser = BasicParser;\r\n//# sourceMappingURL=basic-parser.class.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Ast = require(\"../ast\");\r\nvar lexer_1 = require(\"../lexer\");\r\nvar basic_parser_class_1 = require(\"./basic-parser.class\");\r\nvar parse_result_class_1 = require(\"./parse-result.class\");\r\nvar BooleanOperatorMap = {};\r\nBooleanOperatorMap[lexer_1.TokenType.Equals] = Ast.NodeType.Equal;\r\nBooleanOperatorMap[lexer_1.TokenType.Greater] = Ast.NodeType.Greater;\r\nBooleanOperatorMap[lexer_1.TokenType.Less] = Ast.NodeType.Less;\r\nBooleanOperatorMap[lexer_1.TokenType.GreaterOrEqual] = Ast.NodeType.GreaterOrEqual;\r\nBooleanOperatorMap[lexer_1.TokenType.LessOrEqual] = Ast.NodeType.LessOrEqual;\r\nvar AddOperatorMap = {};\r\nAddOperatorMap[lexer_1.TokenType.Plus] = Ast.NodeType.Add;\r\nAddOperatorMap[lexer_1.TokenType.Minus] = Ast.NodeType.Subtract;\r\nvar MultiOperatorMap = {};\r\nMultiOperatorMap[lexer_1.TokenType.DoubleAsterisk] = Ast.NodeType.Exponent;\r\nMultiOperatorMap[lexer_1.TokenType.Asterisk] = Ast.NodeType.Multiply;\r\nMultiOperatorMap[lexer_1.TokenType.Slash] = Ast.NodeType.Divide;\r\nMultiOperatorMap[lexer_1.TokenType.Percent] = Ast.NodeType.Modulo;\r\nvar DiceParser = /** @class */ (function (_super) {\r\n    __extends(DiceParser, _super);\r\n    function DiceParser(input) {\r\n        return _super.call(this, input) || this;\r\n    }\r\n    DiceParser.prototype.parse = function () {\r\n        var result = new parse_result_class_1.ParseResult();\r\n        result.root = this.parseExpression(result);\r\n        return result;\r\n    };\r\n    DiceParser.prototype.parseExpression = function (result) {\r\n        var root = this.parseSimpleExpression(result);\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (Object.keys(BooleanOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            var newRoot = Ast.Factory.create(BooleanOperatorMap[tokenType]);\r\n            this.lexer.getNextToken();\r\n            newRoot.addChild(root);\r\n            newRoot.addChild(this.parseSimpleExpression(result));\r\n            root = newRoot;\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseSimpleExpression = function (result) {\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (Object.keys(AddOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            this.lexer.getNextToken();\r\n        }\r\n        var root = this.parseTerm(result);\r\n        if (tokenType === lexer_1.TokenType.Minus) {\r\n            var negateNode = Ast.Factory.create(Ast.NodeType.Negate);\r\n            negateNode.addChild(root);\r\n            root = negateNode;\r\n        }\r\n        tokenType = this.lexer.peekNextToken().type;\r\n        while (Object.keys(AddOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            var newRoot = Ast.Factory.create(AddOperatorMap[tokenType]);\r\n            newRoot.addChild(root);\r\n            // Consume the operator.\r\n            this.lexer.getNextToken();\r\n            newRoot.addChild(this.parseTerm(result));\r\n            root = newRoot;\r\n            tokenType = this.lexer.peekNextToken().type;\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseTerm = function (result) {\r\n        var root = this.parseFactor(result);\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        while (Object.keys(MultiOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            var newRoot = Ast.Factory.create(MultiOperatorMap[tokenType]);\r\n            newRoot.addChild(root);\r\n            // Consume the operator.\r\n            this.lexer.getNextToken();\r\n            newRoot.addChild(this.parseFactor(result));\r\n            root = newRoot;\r\n            tokenType = this.lexer.peekNextToken().type;\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseFactor = function (result) {\r\n        var root;\r\n        var token = this.lexer.peekNextToken();\r\n        switch (token.type) {\r\n            case lexer_1.TokenType.Identifier:\r\n                root = this.parseFunction(result);\r\n                break;\r\n            case lexer_1.TokenType.ParenthesisOpen:\r\n                root = this.parseBracketedExpression(result);\r\n                if (this.lexer.peekNextToken().type === lexer_1.TokenType.Identifier) {\r\n                    root = this.parseDiceRoll(result, root);\r\n                }\r\n                break;\r\n            case lexer_1.TokenType.BraceOpen:\r\n                root = this.parseGroup(result);\r\n                break;\r\n            case lexer_1.TokenType.Number:\r\n                var number = this.parseNumber(result);\r\n                if (this.lexer.peekNextToken().type !== lexer_1.TokenType.Identifier) {\r\n                    root = number;\r\n                }\r\n                else {\r\n                    root = this.parseDiceRoll(result, number);\r\n                }\r\n                break;\r\n            default: this.errorToken(result, lexer_1.TokenType.Number, token);\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseSimpleFactor = function (result) {\r\n        var token = this.lexer.peekNextToken();\r\n        switch (token.type) {\r\n            case lexer_1.TokenType.Number: return this.parseNumber(result);\r\n            case lexer_1.TokenType.ParenthesisOpen: return this.parseBracketedExpression(result);\r\n            default: this.errorToken(result, lexer_1.TokenType.Number, token);\r\n        }\r\n    };\r\n    DiceParser.prototype.parseFunction = function (result) {\r\n        var functionName = this.expectAndConsume(result, lexer_1.TokenType.Identifier);\r\n        var root = Ast.Factory.create(Ast.NodeType.Function)\r\n            .setAttribute('name', functionName.value);\r\n        this.expectAndConsume(result, lexer_1.TokenType.ParenthesisOpen);\r\n        // Parse function arguments.\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type !== lexer_1.TokenType.ParenthesisClose) {\r\n            root.addChild(this.parseExpression(result));\r\n            while (this.lexer.peekNextToken().type === lexer_1.TokenType.Comma) {\r\n                this.lexer.getNextToken(); // Consume the comma.\r\n                root.addChild(this.parseExpression(result));\r\n            }\r\n        }\r\n        this.expectAndConsume(result, lexer_1.TokenType.ParenthesisClose);\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseNumber = function (result) {\r\n        var numberToken = this.lexer.getNextToken();\r\n        return Ast.Factory.create(Ast.NodeType.Number)\r\n            .setAttribute('value', Number(numberToken.value));\r\n    };\r\n    DiceParser.prototype.parseBracketedExpression = function (result) {\r\n        this.lexer.getNextToken(); // Consume the opening bracket.\r\n        var root = this.parseExpression(result);\r\n        this.expectAndConsume(result, lexer_1.TokenType.ParenthesisClose);\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseGroup = function (result) {\r\n        this.lexer.getNextToken(); // Consume the opening brace.\r\n        var root = Ast.Factory.create(Ast.NodeType.Group);\r\n        // Parse group elements.\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type !== lexer_1.TokenType.BraceClose) {\r\n            do {\r\n                if (this.lexer.peekNextToken().type === lexer_1.TokenType.Comma) {\r\n                    this.lexer.getNextToken(); // Consume the comma.\r\n                }\r\n                var exp = this.parseExpression(result);\r\n                if (this.lexer.peekNextToken().type === lexer_1.TokenType.Ellipsis) {\r\n                    exp = this.parseRepeat(result, exp);\r\n                }\r\n                root.addChild(exp);\r\n            } while (this.lexer.peekNextToken().type === lexer_1.TokenType.Comma);\r\n        }\r\n        this.expectAndConsume(result, lexer_1.TokenType.BraceClose);\r\n        return this.parseGroupModifiers(result, root);\r\n    };\r\n    DiceParser.prototype.parseRepeat = function (result, lhs) {\r\n        this.lexer.getNextToken(); // Consume the ellipsis.\r\n        var root = Ast.Factory.create(Ast.NodeType.Repeat);\r\n        root.addChild(lhs);\r\n        root.addChild(this.parseExpression(result));\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseDice = function (result, rollTimes) {\r\n        var root = this.parseDiceRoll(result, rollTimes);\r\n        root = this.parseDiceModifiers(result, root);\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseDiceRoll = function (result, rollTimes) {\r\n        if (!rollTimes) {\r\n            rollTimes = this.parseSimpleFactor(result);\r\n        }\r\n        var token = this.expectAndConsume(result, lexer_1.TokenType.Identifier);\r\n        var root = Ast.Factory.create(Ast.NodeType.Dice);\r\n        root.addChild(rollTimes);\r\n        switch (token.value) {\r\n            case 'd':\r\n                var sidesToken = this.expectAndConsume(result, lexer_1.TokenType.Number);\r\n                root.addChild(Ast.Factory.create(Ast.NodeType.DiceSides))\r\n                    .setAttribute('value', Number(sidesToken.value));\r\n                break;\r\n            case 'dF':\r\n                root.addChild(Ast.Factory.create(Ast.NodeType.DiceSides))\r\n                    .setAttribute('value', 'fate');\r\n                break;\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseExplode = function (result, lhs) {\r\n        var root = Ast.Factory.create(Ast.NodeType.Explode);\r\n        root.setAttribute('compound', false);\r\n        root.setAttribute('penetrate', false);\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        this.lexer.getNextToken();\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Exclamation) {\r\n            root.setAttribute('compound', true);\r\n            this.lexer.getNextToken(); // Consume second !.\r\n        }\r\n        token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Identifier) {\r\n            if (token.value === 'p') {\r\n                root.setAttribute('penetrate', true);\r\n            }\r\n            this.lexer.getNextToken(); // Consume p.\r\n        }\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (Object.keys(BooleanOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            root.addChild(this.parseCompareModifier(result));\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseCritical = function (result, lhs) {\r\n        var root = Ast.Factory.create(Ast.NodeType.Critical);\r\n        root.setAttribute('type', 'success');\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Identifier) {\r\n            switch (token.value) {\r\n                case 'c':\r\n                    root.setAttribute('type', 'success');\r\n                    break;\r\n                case 'cs':\r\n                    root.setAttribute('type', 'success');\r\n                    break;\r\n                case 'cf':\r\n                    root.setAttribute('type', 'failure');\r\n                    break;\r\n                default: this.errorMessage(result, \"Unknown critical type \" + token.value + \". Must be (c|cs|cf).\", token);\r\n            }\r\n        }\r\n        this.lexer.getNextToken();\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (Object.keys(BooleanOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            root.addChild(this.parseCompareModifier(result));\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseKeep = function (result, lhs) {\r\n        var root = Ast.Factory.create(Ast.NodeType.Keep);\r\n        root.setAttribute('type', 'highest');\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Identifier) {\r\n            switch (token.value) {\r\n                case 'k':\r\n                    root.setAttribute('type', 'highest');\r\n                    break;\r\n                case 'kh':\r\n                    root.setAttribute('type', 'highest');\r\n                    break;\r\n                case 'kl':\r\n                    root.setAttribute('type', 'lowest');\r\n                    break;\r\n                default: this.errorMessage(result, \"Unknown keep type \" + token.value + \". Must be (k|kh|kl).\", token);\r\n            }\r\n        }\r\n        this.lexer.getNextToken(); // Consume.\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (tokenType === lexer_1.TokenType.Number || tokenType === lexer_1.TokenType.ParenthesisOpen) {\r\n            root.addChild(this.parseSimpleFactor(result));\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseDrop = function (result, lhs) {\r\n        var root = Ast.Factory.create(Ast.NodeType.Drop);\r\n        root.setAttribute('type', 'lowest');\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Identifier) {\r\n            switch (token.value) {\r\n                case 'd':\r\n                    root.setAttribute('type', 'lowest');\r\n                    break;\r\n                case 'dh':\r\n                    root.setAttribute('type', 'highest');\r\n                    break;\r\n                case 'dl':\r\n                    root.setAttribute('type', 'lowest');\r\n                    break;\r\n                default: this.errorMessage(result, \"Unknown drop type \" + token.value + \". Must be (d|dh|dl).\", token);\r\n            }\r\n        }\r\n        this.lexer.getNextToken(); // Consume.\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (tokenType === lexer_1.TokenType.Number || tokenType === lexer_1.TokenType.ParenthesisOpen) {\r\n            root.addChild(this.parseSimpleFactor(result));\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseReroll = function (result, lhs) {\r\n        var root = Ast.Factory.create(Ast.NodeType.Reroll);\r\n        root.setAttribute('once', false);\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Identifier) {\r\n            switch (token.value) {\r\n                case 'r':\r\n                    root.setAttribute('once', false);\r\n                    break;\r\n                case 'ro':\r\n                    root.setAttribute('once', true);\r\n                    break;\r\n                default: this.errorMessage(result, \"Unknown drop type \" + token.value + \". Must be (r|ro).\", token);\r\n            }\r\n        }\r\n        this.lexer.getNextToken(); // Consume.\r\n        var tokenType = this.lexer.peekNextToken().type;\r\n        if (Object.keys(BooleanOperatorMap).indexOf(tokenType.toString()) > -1) {\r\n            root.addChild(this.parseCompareModifier(result));\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseSort = function (result, lhs) {\r\n        var root = Ast.Factory.create(Ast.NodeType.Sort);\r\n        root.setAttribute('direction', 'ascending');\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        var token = this.lexer.peekNextToken();\r\n        if (token.type === lexer_1.TokenType.Identifier) {\r\n            switch (token.value) {\r\n                case 's':\r\n                    root.setAttribute('direction', 'ascending');\r\n                    break;\r\n                case 'sa':\r\n                    root.setAttribute('direction', 'ascending');\r\n                    break;\r\n                case 'sd':\r\n                    root.setAttribute('direction', 'descending');\r\n                    break;\r\n                default: this.errorMessage(result, \"Unknown sort type \" + token.value + \". Must be (s|sa|sd).\", token);\r\n            }\r\n        }\r\n        this.lexer.getNextToken(); // Consume.\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseCompareModifier = function (result, lhs) {\r\n        var token = this.lexer.peekNextToken();\r\n        var root;\r\n        if (token.type === lexer_1.TokenType.Number) {\r\n            root = Ast.Factory.create(Ast.NodeType.Equal);\r\n        }\r\n        else if (Object.keys(BooleanOperatorMap).indexOf(token.type.toString()) > -1) {\r\n            root = Ast.Factory.create(BooleanOperatorMap[token.type]);\r\n            this.lexer.getNextToken();\r\n        }\r\n        else {\r\n            this.errorToken(result, lexer_1.TokenType.Number, token);\r\n        }\r\n        if (lhs) {\r\n            root.addChild(lhs);\r\n        }\r\n        root.addChild(this.parseSimpleFactor(result));\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseDiceModifiers = function (result, root) {\r\n        while (true) {\r\n            var token = this.lexer.peekNextToken();\r\n            if (Object.keys(BooleanOperatorMap).indexOf(token.type.toString()) > -1) {\r\n                root = this.parseCompareModifier(result, root);\r\n            }\r\n            else if (token.type === lexer_1.TokenType.Identifier) {\r\n                switch (token.value[0]) {\r\n                    case 'c':\r\n                        root = this.parseCritical(result, root);\r\n                        break;\r\n                    case 'd':\r\n                        root = this.parseDrop(result, root);\r\n                        break;\r\n                    case 'k':\r\n                        root = this.parseKeep(result, root);\r\n                        break;\r\n                    case 'r':\r\n                        root = this.parseReroll(result, root);\r\n                        break;\r\n                    case 's':\r\n                        root = this.parseSort(result, root);\r\n                        break;\r\n                    default:\r\n                        this.errorToken(result, lexer_1.TokenType.Identifier, token);\r\n                        return root;\r\n                }\r\n            }\r\n            else if (token.type === lexer_1.TokenType.Exclamation) {\r\n                root = this.parseExplode(result, root);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    DiceParser.prototype.parseGroupModifiers = function (result, root) {\r\n        while (true) {\r\n            var token = this.lexer.peekNextToken();\r\n            if (Object.keys(BooleanOperatorMap).indexOf(token.type.toString()) > -1) {\r\n                root = this.parseCompareModifier(result, root);\r\n            }\r\n            else if (token.type === lexer_1.TokenType.Identifier) {\r\n                switch (token.value[0]) {\r\n                    case 'd':\r\n                        root = this.parseDrop(result, root);\r\n                        break;\r\n                    case 'k':\r\n                        root = this.parseKeep(result, root);\r\n                        break;\r\n                    case 's':\r\n                        root = this.parseSort(result, root);\r\n                        break;\r\n                    default:\r\n                        this.errorToken(result, lexer_1.TokenType.Identifier, token);\r\n                        return root;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    return DiceParser;\r\n}(basic_parser_class_1.BasicParser));\r\nexports.DiceParser = DiceParser;\r\n//# sourceMappingURL=dice-parser.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ErrorMessage = /** @class */ (function () {\r\n    function ErrorMessage(message, token, stackTrace) {\r\n        this.message = message;\r\n    }\r\n    return ErrorMessage;\r\n}());\r\nexports.ErrorMessage = ErrorMessage;\r\n//# sourceMappingURL=error-message.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParseResult = /** @class */ (function () {\r\n    function ParseResult() {\r\n        this.errors = [];\r\n    }\r\n    return ParseResult;\r\n}());\r\nexports.ParseResult = ParseResult;\r\n//# sourceMappingURL=parse-result.class.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Random = require(\"random-js\");\r\nvar DefaultRandomProvider = /** @class */ (function () {\r\n    function DefaultRandomProvider() {\r\n        this.random = new Random(Random.engines.mt19937().autoSeed());\r\n    }\r\n    DefaultRandomProvider.prototype.numberBetween = function (min, max) {\r\n        return this.random.integer(min, max);\r\n    };\r\n    return DefaultRandomProvider;\r\n}());\r\nexports.DefaultRandomProvider = DefaultRandomProvider;\r\n//# sourceMappingURL=default-random-provider.class.js.map","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./default-random-provider.class\"));\r\n//# sourceMappingURL=index.js.map","/*jshint eqnull:true*/\n(function (root) {\n  \"use strict\";\n\n  var GLOBAL_KEY = \"Random\";\n\n  var imul = (typeof Math.imul !== \"function\" || Math.imul(0xffffffff, 5) !== -5 ?\n    function (a, b) {\n      var ah = (a >>> 16) & 0xffff;\n      var al = a & 0xffff;\n      var bh = (b >>> 16) & 0xffff;\n      var bl = b & 0xffff;\n      // the shift by 0 fixes the sign on the high part\n      // the final |0 converts the unsigned value into a signed value\n      return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;\n    } :\n    Math.imul);\n\n  var stringRepeat = (typeof String.prototype.repeat === \"function\" && \"x\".repeat(3) === \"xxx\" ?\n    function (x, y) {\n      return x.repeat(y);\n    } : function (pattern, count) {\n      var result = \"\";\n      while (count > 0) {\n        if (count & 1) {\n          result += pattern;\n        }\n        count >>= 1;\n        pattern += pattern;\n      }\n      return result;\n    });\n\n  function Random(engine) {\n    if (!(this instanceof Random)) {\n      return new Random(engine);\n    }\n\n    if (engine == null) {\n      engine = Random.engines.nativeMath;\n    } else if (typeof engine !== \"function\") {\n      throw new TypeError(\"Expected engine to be a function, got \" + typeof engine);\n    }\n    this.engine = engine;\n  }\n  var proto = Random.prototype;\n\n  Random.engines = {\n    nativeMath: function () {\n      return (Math.random() * 0x100000000) | 0;\n    },\n    mt19937: (function (Int32Array) {\n      // http://en.wikipedia.org/wiki/Mersenne_twister\n      function refreshData(data) {\n        var k = 0;\n        var tmp = 0;\n        for (;\n          (k | 0) < 227; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        for (;\n          (k | 0) < 623; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);\n        data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n      }\n\n      function temper(value) {\n        value ^= value >>> 11;\n        value ^= (value << 7) & 0x9d2c5680;\n        value ^= (value << 15) & 0xefc60000;\n        return value ^ (value >>> 18);\n      }\n\n      function seedWithArray(data, source) {\n        var i = 1;\n        var j = 0;\n        var sourceLength = source.length;\n        var k = Math.max(sourceLength, 624) | 0;\n        var previous = data[0] | 0;\n        for (;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;\n          i = (i + 1) | 0;\n          ++j;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n          if (j >= sourceLength) {\n            j = 0;\n          }\n        }\n        for (k = 623;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;\n          i = (i + 1) | 0;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n        }\n        data[0] = 0x80000000;\n      }\n\n      function mt19937() {\n        var data = new Int32Array(624);\n        var index = 0;\n        var uses = 0;\n\n        function next() {\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n\n          var value = data[index];\n          index = (index + 1) | 0;\n          uses += 1;\n          return temper(value) | 0;\n        }\n        next.getUseCount = function() {\n          return uses;\n        };\n        next.discard = function (count) {\n          uses += count;\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n          while ((count - index) > 624) {\n            count -= 624 - index;\n            refreshData(data);\n            index = 0;\n          }\n          index = (index + count) | 0;\n          return next;\n        };\n        next.seed = function (initial) {\n          var previous = 0;\n          data[0] = previous = initial | 0;\n\n          for (var i = 1; i < 624; i = (i + 1) | 0) {\n            data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;\n          }\n          index = 624;\n          uses = 0;\n          return next;\n        };\n        next.seedWithArray = function (source) {\n          next.seed(0x012bd6aa);\n          seedWithArray(data, source);\n          return next;\n        };\n        next.autoSeed = function () {\n          return next.seedWithArray(Random.generateEntropyArray());\n        };\n        return next;\n      }\n\n      return mt19937;\n    }(typeof Int32Array === \"function\" ? Int32Array : Array)),\n    browserCrypto: (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\" && typeof Int32Array === \"function\") ? (function () {\n      var data = null;\n      var index = 128;\n\n      return function () {\n        if (index >= 128) {\n          if (data === null) {\n            data = new Int32Array(128);\n          }\n          crypto.getRandomValues(data);\n          index = 0;\n        }\n\n        return data[index++] | 0;\n      };\n    }()) : null\n  };\n\n  Random.generateEntropyArray = function () {\n    var array = [];\n    var engine = Random.engines.nativeMath;\n    for (var i = 0; i < 16; ++i) {\n      array[i] = engine() | 0;\n    }\n    array.push(new Date().getTime() | 0);\n    return array;\n  };\n\n  function returnValue(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  // [-0x80000000, 0x7fffffff]\n  Random.int32 = function (engine) {\n    return engine() | 0;\n  };\n  proto.int32 = function () {\n    return Random.int32(this.engine);\n  };\n\n  // [0, 0xffffffff]\n  Random.uint32 = function (engine) {\n    return engine() >>> 0;\n  };\n  proto.uint32 = function () {\n    return Random.uint32(this.engine);\n  };\n\n  // [0, 0x1fffffffffffff]\n  Random.uint53 = function (engine) {\n    var high = engine() & 0x1fffff;\n    var low = engine() >>> 0;\n    return (high * 0x100000000) + low;\n  };\n  proto.uint53 = function () {\n    return Random.uint53(this.engine);\n  };\n\n  // [0, 0x20000000000000]\n  Random.uint53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x200000) {\n        if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low;\n      }\n    }\n  };\n  proto.uint53Full = function () {\n    return Random.uint53Full(this.engine);\n  };\n\n  // [-0x20000000000000, 0x1fffffffffffff]\n  Random.int53 = function (engine) {\n    var high = engine() | 0;\n    var low = engine() >>> 0;\n    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n  };\n  proto.int53 = function () {\n    return Random.int53(this.engine);\n  };\n\n  // [-0x20000000000000, 0x20000000000000]\n  Random.int53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x400000) {\n        if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n      }\n    }\n  };\n  proto.int53Full = function () {\n    return Random.int53Full(this.engine);\n  };\n\n  function add(generate, addend) {\n    if (addend === 0) {\n      return generate;\n    } else {\n      return function (engine) {\n        return generate(engine) + addend;\n      };\n    }\n  }\n\n  Random.integer = (function () {\n    function isPowerOfTwoMinusOne(value) {\n      return ((value + 1) & value) === 0;\n    }\n\n    function bitmask(masking) {\n      return function (engine) {\n        return engine() & masking;\n      };\n    }\n\n    function downscaleToLoopCheckedRange(range) {\n      var extendedRange = range + 1;\n      var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);\n      return function (engine) {\n        var value = 0;\n        do {\n          value = engine() >>> 0;\n        } while (value >= maximum);\n        return value % extendedRange;\n      };\n    }\n\n    function downscaleToRange(range) {\n      if (isPowerOfTwoMinusOne(range)) {\n        return bitmask(range);\n      } else {\n        return downscaleToLoopCheckedRange(range);\n      }\n    }\n\n    function isEvenlyDivisibleByMaxInt32(value) {\n      return (value | 0) === 0;\n    }\n\n    function upscaleWithHighMasking(masking) {\n      return function (engine) {\n        var high = engine() & masking;\n        var low = engine() >>> 0;\n        return (high * 0x100000000) + low;\n      };\n    }\n\n    function upscaleToLoopCheckedRange(extendedRange) {\n      var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() & 0x1fffff;\n          var low = engine() >>> 0;\n          ret = (high * 0x100000000) + low;\n        } while (ret >= maximum);\n        return ret % extendedRange;\n      };\n    }\n\n    function upscaleWithinU53(range) {\n      var extendedRange = range + 1;\n      if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n        var highRange = ((extendedRange / 0x100000000) | 0) - 1;\n        if (isPowerOfTwoMinusOne(highRange)) {\n          return upscaleWithHighMasking(highRange);\n        }\n      }\n      return upscaleToLoopCheckedRange(extendedRange);\n    }\n\n    function upscaleWithinI53AndLoopCheck(min, max) {\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() | 0;\n          var low = engine() >>> 0;\n          ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n        } while (ret < min || ret > max);\n        return ret;\n      };\n    }\n\n    return function (min, max) {\n      min = Math.floor(min);\n      max = Math.floor(max);\n      if (min < -0x20000000000000 || !isFinite(min)) {\n        throw new RangeError(\"Expected min to be at least \" + (-0x20000000000000));\n      } else if (max > 0x20000000000000 || !isFinite(max)) {\n        throw new RangeError(\"Expected max to be at most \" + 0x20000000000000);\n      }\n\n      var range = max - min;\n      if (range <= 0 || !isFinite(range)) {\n        return returnValue(min);\n      } else if (range === 0xffffffff) {\n        if (min === 0) {\n          return Random.uint32;\n        } else {\n          return add(Random.int32, min + 0x80000000);\n        }\n      } else if (range < 0xffffffff) {\n        return add(downscaleToRange(range), min);\n      } else if (range === 0x1fffffffffffff) {\n        return add(Random.uint53, min);\n      } else if (range < 0x1fffffffffffff) {\n        return add(upscaleWithinU53(range), min);\n      } else if (max - 1 - min === 0x1fffffffffffff) {\n        return add(Random.uint53Full, min);\n      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n        return Random.int53Full;\n      } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {\n        return Random.int53;\n      } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {\n        return add(Random.int53, 1);\n      } else if (max === 0x20000000000000) {\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n      } else {\n        return upscaleWithinI53AndLoopCheck(min, max);\n      }\n    };\n  }());\n  proto.integer = function (min, max) {\n    return Random.integer(min, max)(this.engine);\n  };\n\n  // [0, 1] (floating point)\n  Random.realZeroToOneInclusive = function (engine) {\n    return Random.uint53Full(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneInclusive = function () {\n    return Random.realZeroToOneInclusive(this.engine);\n  };\n\n  // [0, 1) (floating point)\n  Random.realZeroToOneExclusive = function (engine) {\n    return Random.uint53(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneExclusive = function () {\n    return Random.realZeroToOneExclusive(this.engine);\n  };\n\n  Random.real = (function () {\n    function multiply(generate, multiplier) {\n      if (multiplier === 1) {\n        return generate;\n      } else if (multiplier === 0) {\n        return function () {\n          return 0;\n        };\n      } else {\n        return function (engine) {\n          return generate(engine) * multiplier;\n        };\n      }\n    }\n\n    return function (left, right, inclusive) {\n      if (!isFinite(left)) {\n        throw new RangeError(\"Expected left to be a finite number\");\n      } else if (!isFinite(right)) {\n        throw new RangeError(\"Expected right to be a finite number\");\n      }\n      return add(\n        multiply(\n          inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,\n          right - left),\n        left);\n    };\n  }());\n  proto.real = function (min, max, inclusive) {\n    return Random.real(min, max, inclusive)(this.engine);\n  };\n\n  Random.bool = (function () {\n    function isLeastBitTrue(engine) {\n      return (engine() & 1) === 1;\n    }\n\n    function lessThan(generate, value) {\n      return function (engine) {\n        return generate(engine) < value;\n      };\n    }\n\n    function probability(percentage) {\n      if (percentage <= 0) {\n        return returnValue(false);\n      } else if (percentage >= 1) {\n        return returnValue(true);\n      } else {\n        var scaled = percentage * 0x100000000;\n        if (scaled % 1 === 0) {\n          return lessThan(Random.int32, (scaled - 0x80000000) | 0);\n        } else {\n          return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));\n        }\n      }\n    }\n\n    return function (numerator, denominator) {\n      if (denominator == null) {\n        if (numerator == null) {\n          return isLeastBitTrue;\n        }\n        return probability(numerator);\n      } else {\n        if (numerator <= 0) {\n          return returnValue(false);\n        } else if (numerator >= denominator) {\n          return returnValue(true);\n        }\n        return lessThan(Random.integer(0, denominator - 1), numerator);\n      }\n    };\n  }());\n  proto.bool = function (numerator, denominator) {\n    return Random.bool(numerator, denominator)(this.engine);\n  };\n\n  function toInteger(value) {\n    var number = +value;\n    if (number < 0) {\n      return Math.ceil(number);\n    } else {\n      return Math.floor(number);\n    }\n  }\n\n  function convertSliceArgument(value, length) {\n    if (value < 0) {\n      return Math.max(value + length, 0);\n    } else {\n      return Math.min(value, length);\n    }\n  }\n  Random.pick = function (engine, array, begin, end) {\n    var length = array.length;\n    var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n    var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n    if (start >= finish) {\n      return void 0;\n    }\n    var distribution = Random.integer(start, finish - 1);\n    return array[distribution(engine)];\n  };\n  proto.pick = function (array, begin, end) {\n    return Random.pick(this.engine, array, begin, end);\n  };\n\n  function returnUndefined() {\n    return void 0;\n  }\n  var slice = Array.prototype.slice;\n  Random.picker = function (array, begin, end) {\n    var clone = slice.call(array, begin, end);\n    if (!clone.length) {\n      return returnUndefined;\n    }\n    var distribution = Random.integer(0, clone.length - 1);\n    return function (engine) {\n      return clone[distribution(engine)];\n    };\n  };\n\n  Random.shuffle = function (engine, array, downTo) {\n    var length = array.length;\n    if (length) {\n      if (downTo == null) {\n        downTo = 0;\n      }\n      for (var i = (length - 1) >>> 0; i > downTo; --i) {\n        var distribution = Random.integer(0, i);\n        var j = distribution(engine);\n        if (i !== j) {\n          var tmp = array[i];\n          array[i] = array[j];\n          array[j] = tmp;\n        }\n      }\n    }\n    return array;\n  };\n  proto.shuffle = function (array) {\n    return Random.shuffle(this.engine, array);\n  };\n\n  Random.sample = function (engine, population, sampleSize) {\n    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n      throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n    }\n\n    if (sampleSize === 0) {\n      return [];\n    }\n\n    var clone = slice.call(population);\n    var length = clone.length;\n    if (length === sampleSize) {\n      return Random.shuffle(engine, clone, 0);\n    }\n    var tailLength = length - sampleSize;\n    return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);\n  };\n  proto.sample = function (population, sampleSize) {\n    return Random.sample(this.engine, population, sampleSize);\n  };\n\n  Random.die = function (sideCount) {\n    return Random.integer(1, sideCount);\n  };\n  proto.die = function (sideCount) {\n    return Random.die(sideCount)(this.engine);\n  };\n\n  Random.dice = function (sideCount, dieCount) {\n    var distribution = Random.die(sideCount);\n    return function (engine) {\n      var result = [];\n      result.length = dieCount;\n      for (var i = 0; i < dieCount; ++i) {\n        result[i] = distribution(engine);\n      }\n      return result;\n    };\n  };\n  proto.dice = function (sideCount, dieCount) {\n    return Random.dice(sideCount, dieCount)(this.engine);\n  };\n\n  // http://en.wikipedia.org/wiki/Universally_unique_identifier\n  Random.uuid4 = (function () {\n    function zeroPad(string, zeroCount) {\n      return stringRepeat(\"0\", zeroCount - string.length) + string;\n    }\n\n    return function (engine) {\n      var a = engine() >>> 0;\n      var b = engine() | 0;\n      var c = engine() | 0;\n      var d = engine() >>> 0;\n\n      return (\n        zeroPad(a.toString(16), 8) +\n        \"-\" +\n        zeroPad((b & 0xffff).toString(16), 4) +\n        \"-\" +\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n        zeroPad(d.toString(16), 8));\n    };\n  }());\n  proto.uuid4 = function () {\n    return Random.uuid4(this.engine);\n  };\n\n  Random.string = (function () {\n    // has 2**x chars, for faster uniform distribution\n    var DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n    return function (pool) {\n      if (pool == null) {\n        pool = DEFAULT_STRING_POOL;\n      }\n\n      var length = pool.length;\n      if (!length) {\n        throw new Error(\"Expected pool not to be an empty string\");\n      }\n\n      var distribution = Random.integer(0, length - 1);\n      return function (engine, length) {\n        var result = \"\";\n        for (var i = 0; i < length; ++i) {\n          var j = distribution(engine);\n          result += pool.charAt(j);\n        }\n        return result;\n      };\n    };\n  }());\n  proto.string = function (length, pool) {\n    return Random.string(pool)(this.engine, length);\n  };\n\n  Random.hex = (function () {\n    var LOWER_HEX_POOL = \"0123456789abcdef\";\n    var lowerHex = Random.string(LOWER_HEX_POOL);\n    var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());\n\n    return function (upper) {\n      if (upper) {\n        return upperHex;\n      } else {\n        return lowerHex;\n      }\n    };\n  }());\n  proto.hex = function (length, upper) {\n    return Random.hex(upper)(this.engine, length);\n  };\n\n  Random.date = function (start, end) {\n    if (!(start instanceof Date)) {\n      throw new TypeError(\"Expected start to be a Date, got \" + typeof start);\n    } else if (!(end instanceof Date)) {\n      throw new TypeError(\"Expected end to be a Date, got \" + typeof end);\n    }\n    var distribution = Random.integer(start.getTime(), end.getTime());\n    return function (engine) {\n      return new Date(distribution(engine));\n    };\n  };\n  proto.date = function (start, end) {\n    return Random.date(start, end)(this.engine);\n  };\n\n  if (typeof define === \"function\" && define.amd) {\n    define(function () {\n      return Random;\n    });\n  } else if (typeof module !== \"undefined\" && typeof require === \"function\") {\n    module.exports = Random;\n  } else {\n    (function () {\n      var oldGlobal = root[GLOBAL_KEY];\n      Random.noConflict = function () {\n        root[GLOBAL_KEY] = oldGlobal;\n        return this;\n      };\n    }());\n    root[GLOBAL_KEY] = Random;\n  }\n}(this));"]}